name: Test GEOS Integration

on:
  workflow_call:
  workflow_dispatch:

jobs:
  test_geos_integration:
    name: Test geosPythonPackages Integration with GEOS (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout geosPythonPackages
      uses: actions/checkout@v4
      with:
        path: geosPythonPackages
    
    - name: Checkout GEOS
      uses: actions/checkout@v4
      with:
        repository: GEOS-DEV/GEOS
        ref: develop
        path: GEOS
        submodules: recursive
    
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          gfortran \
          libopenmpi-dev \
          libhdf5-dev \
          libhdf5-mpi-dev \
          libblas-dev \
          liblapack-dev \
          python3-dev \
          python3-pip \
          pkg-config \
          git \
          wget \
          curl
        
        # Install Python packages that GEOS might need
        pip install numpy scipy matplotlib h5py
    
    - name: Install geosPythonPackages dependencies
      run: |
        cd geosPythonPackages
        
        # Install geosPythonPackages in development mode
        echo "Installing geosPythonPackages dependencies..."
        if [ -f "docs/requirements.txt" ]; then
          pip install -r docs/requirements.txt
        fi
        
        # Install packages from each subpackage if they have setup.py or pyproject.toml
        for pkg_dir in geos-*; do
          if [ -d "$pkg_dir" ]; then
            echo "Checking $pkg_dir for installable package..."
            cd "$pkg_dir"
            
            if [ -f "pyproject.toml" ]; then
              echo "Installing $pkg_dir in development mode..."
              pip install -e . || echo "Warning: Could not install $pkg_dir"
            fi
            
            cd ..
          fi
        done
    
    - name: Test GEOS integration
      run: |
        echo "Testing geosPythonPackages integration with GEOS"
        echo "================================================"
        echo ""
        
        # Set up paths
        export GEOS_ROOT="$(pwd)/GEOS"
        export GEOSPYTHONPACKAGES_ROOT="$(pwd)/geosPythonPackages"
        export SOURCE_DIR="$GEOS_ROOT/src"
        export CMAKE_LIST_PATH="$SOURCE_DIR/CMakeLists.txt"
        export SETUP_PYTHON_ENVIRONMENT_SCRIPT="$GEOS_ROOT/scripts/setupPythonEnvironment.bash"
        
        # Get the actual PR source branch name (not the merge commit)
        # For PRs, use GITHUB_HEAD_REF (source branch), for direct pushes use GITHUB_REF_NAME
        if [ -n "${{ github.head_ref }}" ]; then
          export CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME="${{ github.head_ref }}"
        else
          export CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME="${{ github.ref_name }}"
        fi
        
        echo "Paths:"
        echo "   GEOS: $GEOS_ROOT"
        echo "   geosPythonPackages: $GEOSPYTHONPACKAGES_ROOT"
        echo "   CMakeLists.txt: $CMAKE_LIST_PATH"
        echo "   setupPythonEnvironment.bash: $SETUP_PYTHON_ENVIRONMENT_SCRIPT"
        echo "   Current geosPythonPackages branch: $CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME"
        echo ""
        
        # Test Python environment setup
        echo "Testing Python environment setup..."
        if [ -f "$SETUP_PYTHON_ENVIRONMENT_SCRIPT" ]; then
          echo "Found setupPythonEnvironment.bash"
          
          # Test the script help output
          echo "Testing script help functionality..."
          if bash "$SETUP_PYTHON_ENVIRONMENT_SCRIPT" --help 2>&1 | head -10; then
            echo "setupPythonEnvironment.bash is functional"
          else
            echo "setupPythonEnvironment.bash exists but help failed"
            echo "Script may still be functional for integration"
          fi
        else
          echo "setupPythonEnvironment.bash not found"
          exit 1
        fi
        echo ""
        
        # Check for GEOS CMakeLists.txt in src directory
        if [ -f "$CMAKE_LIST_PATH" ]; then
          echo "Found GEOS CMakeLists.txt in src/ directory"
          echo ""
        else
          echo "CMakeLists.txt not found in expected location"
          exit 1
        fi
        
        # Create a minimal build directory for testing CMake
        echo "Creating test build directory..."
        mkdir -p build_test && cd build_test
        
        echo "Using source directory: $SOURCE_DIR"
        
        # CMake configuration must succeed for a proper integration test
        echo "Configuring GEOS with Python tools enabled..."
        if cmake "$SOURCE_DIR" \
          -DCMAKE_BUILD_TYPE=Release \
          -DGEOS_PYTHON_PACKAGES_BRANCH="$CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME"; then
          
          echo "CMake configuration succeeded!"
          
          # Verify the Python tools target exists
          echo "Checking for geosx_python_tools target..."
          if make help 2>/dev/null | grep -q geosx_python_tools; then
            echo "Found 'make geosx_python_tools' target"
            
            # Build Python tools
            echo "Building geosx_python_tools..."
            if make geosx_python_tools -j2; then
              echo "geosx_python_tools built successfully!"
              echo "GEOS integration with Python tools is working!"
            else
              echo "geosx_python_tools build failed"
              echo "Integration test FAILED - Python tools must build successfully"
              exit 1
            fi
          else
            echo "'make geosx_python_tools' target not found"
            echo "Available targets:"
            make help 2>/dev/null | head -10 || echo "No make targets available"
            echo "Integration test FAILED - Python tools target must be available"
            exit 1
          fi
        else
          echo "CMake configuration failed"
          echo "Integration test FAILED - CMake configuration with Python tools must succeed"
          echo "Check the CMake output above for dependency issues"
          exit 1
        fi
        
        cd "$GEOSPYTHONPACKAGES_ROOT"
        echo ""
        
        # Test geosPythonPackages structure
        echo "Testing geosPythonPackages structure..."
        
        # Check key directories
        for dir in "geos-xml-tools" "geos-ats" "geos-utils" "geos-mesh"; do
          if [ -d "$dir" ]; then
            echo "Found $dir"
          else
            echo "Missing $dir"
            exit 1
          fi
        done
        echo ""
        
        # Test XML tools if available
        if [ -d "geos-xml-tools" ]; then
          echo "Testing XML tools..."
          cd geos-xml-tools
          
          # Check for Python files
          if find . -name "*.py" -type f | head -5; then
            echo "Found Python files in XML tools"
            
            # Test if key tools exist
            for tool in "preprocess_xml.py" "format_xml.py"; do
              if find . -name "$tool" -type f; then
                echo "Found $tool"
              else
                echo "$tool not found"
                exit 1
              fi
            done
          else
            echo "No Python files found in XML tools"
            exit 1
          fi
          
          cd "$GEOSPYTHONPACKAGES_ROOT"
        fi
        echo ""
        
        # Test ATS integration
        if [ -d "geos-ats" ]; then
          echo "Testing ATS integration..."
          cd geos-ats
          
          if find . -name "run_geos_ats.py" -type f; then
            echo "Found run_geos_ats.py"
          else
            echo "run_geos_ats.py not found"
            exit 1
          fi
          
          cd "$GEOSPYTHONPACKAGES_ROOT"
        fi
        echo ""
        
        # Test package installations
        echo "Testing package installation process..."
        if [ -f "install_packages.sh" ]; then
          echo "Found install_packages.sh"
          # Test script syntax
          bash -n install_packages.sh && echo "install_packages.sh syntax OK" || echo "install_packages.sh has syntax errors"
        else
          echo "install_packages.sh not found"
          exit 1
        fi
        echo ""
        
        echo "GEOS integration test completed successfully for Python ${{ matrix.python-version }}"

  integration_summary:
    name: GEOS Integration Summary
    runs-on: ubuntu-latest
    needs: test_geos_integration
    if: always() # Ensures this job runs even if some matrix jobs fail

    steps:
    - name: Summarize Python version results
      run: |
        # This script parses the results of the matrix jobs to provide a detailed summary.
        # It uses 'jq' to process the JSON from the 'needs.test_geos_integration.jobs' context.
        RESULTS_JSON='${{ toJSON(needs.test_geos_integration.jobs) }}'
        ANY_FAILED=false

        echo "## GEOS Integration Test Summary"
        echo ""

        # Use process substitution to read from jq's output for each job in the matrix
        while IFS=':' read -r version result; do
          if [ "$result" == "success" ]; then
            echo "| Python $version | Pass |"
          else
            echo "| Python $version | Fail |"
            ANY_FAILED=true
          fi
        done < <(echo "$RESULTS_JSON" | jq -r 'to_entries[] | "\(.key):\(.value.result)"')

        echo ""

        # Provide a final conclusion and fail the job if any version failed
        if [ "$ANY_FAILED" = "true" ]; then
          echo "**Conclusion:** At least one Python version failed the integration tests."
          echo "Please review the logs for the failing job(s) to diagnose the issue."
          exit 1
        else
          echo "**Conclusion:** All Python versions passed the integration tests successfully!"
        fi