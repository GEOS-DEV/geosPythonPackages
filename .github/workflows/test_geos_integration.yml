name: Test GEOS Integration

on:
  workflow_call:
  workflow_dispatch:

jobs:
  test_geos_integration:
    name: Test geosPythonPackages Integration with GEOS (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout geosPythonPackages
      uses: actions/checkout@v4
      with:
        path: geosPythonPackages
    
    - name: Checkout GEOS
      uses: actions/checkout@v4
      with:
        repository: GEOS-DEV/GEOS
        ref: develop
        path: GEOS
        submodules: recursive
    
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          gfortran \
          libopenmpi-dev \
          libhdf5-dev \
          libhdf5-mpi-dev \
          libblas-dev \
          liblapack-dev \
          python3-dev \
          python3-pip \
          pkg-config \
          git \
          wget \
          curl
    
    - name: Test GEOS integration
      run: |
        echo "Testing geosPythonPackages integration with GEOS"
        echo "================================================"
        echo ""
        
        # Set up paths
        export GEOS_ROOT="$(pwd)/GEOS"
        export GEOSPYTHONPACKAGES_ROOT="$(pwd)/geosPythonPackages"
        export SOURCE_DIR="$GEOS_ROOT/src"
        export CMAKE_LIST_PATH="$SOURCE_DIR/CMakeLists.txt"
        export SETUP_PYTHON_ENVIRONMENT_SCRIPT="$GEOS_ROOT/scripts/setupPythonEnvironment.bash"
        
        # Get the actual PR source branch name (not the merge commit)
        # For PRs, use GITHUB_HEAD_REF (source branch), for direct pushes use GITHUB_REF_NAME
        if [ -n "${{ github.head_ref }}" ]; then
          export CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME="${{ github.head_ref }}"
        else
          export CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME="${{ github.ref_name }}"
        fi
        
        echo "Paths:"
        echo "   GEOS: $GEOS_ROOT"
        echo "   geosPythonPackages: $GEOSPYTHONPACKAGES_ROOT"
        echo "   CMakeLists.txt: $CMAKE_LIST_PATH"
        echo "   setupPythonEnvironment.bash: $SETUP_PYTHON_ENVIRONMENT_SCRIPT"
        echo "   Current geosPythonPackages branch: $CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME"
        echo ""
        
        # Test Python environment setup
        echo "Testing Python environment setup..."
        if [ -f "$SETUP_PYTHON_ENVIRONMENT_SCRIPT" ]; then
          echo "Found setupPythonEnvironment.bash"
          
          # Test the script help output
          echo "Testing script help functionality..."
          if bash "$SETUP_PYTHON_ENVIRONMENT_SCRIPT" --help 2>&1 | head -10; then
            echo "setupPythonEnvironment.bash is functional"
          else
            echo "setupPythonEnvironment.bash exists but help failed"
            echo "Script may still be functional for integration"
          fi
        else
          echo "setupPythonEnvironment.bash not found"
          exit 1
        fi
        echo ""
        
        # Check for GEOS CMakeLists.txt in src directory
        if [ -f "$CMAKE_LIST_PATH" ]; then
          echo "Found GEOS CMakeLists.txt in src/ directory"
          echo ""
        else
          echo "CMakeLists.txt not found in expected location"
          exit 1
        fi
        
        # Create a minimal build directory for testing Python tools
        echo "Creating test build directory..."
        mkdir -p build_test && cd build_test
        
        echo "Using source directory: $SOURCE_DIR"
        
        # First test: Direct script execution (fallback if CMake fails)
        echo "=== Test 1: Direct setupPythonEnvironment.bash execution ==="
        echo "Using geosPythonPackages branch: $CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME"
        
        # Set environment variables to avoid packaging conflicts
        export SETUPTOOLS_USE_DISTUTILS=stdlib
        export PIP_DISABLE_PIP_VERSION_CHECK=1
        
        # Create a minimal bin directory for the direct test
        mkdir -p bin_direct
        
        # Run the setupPythonEnvironment.bash script directly
        if bash "$SETUP_PYTHON_ENVIRONMENT_SCRIPT" \
          -p $(which python3) \
          -b "$(pwd)/bin_direct" \
          --python-pkg-branch "$CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME" \
          --verbose; then
          
          echo "Direct setupPythonEnvironment.bash succeeded!"
          
          # Check if the Python tools were created
          if [ -f "bin_direct/preprocess_xml" ] && [ -f "bin_direct/format_xml" ]; then
            echo "Found Python tool binaries (direct method):"
            ls -la bin_direct/
            
            # Test that the tools are functional
            echo "Testing direct tools functionality..."
            if bin_direct/preprocess_xml --help > /dev/null 2>&1; then
              echo "preprocess_xml (direct) is functional"
            fi
            if bin_direct/format_xml --help > /dev/null 2>&1; then
              echo "format_xml (direct) is functional"
            fi
          else
            echo "Direct method failed to create Python tools"
            exit 1
          fi
        else
          echo "Direct setupPythonEnvironment.bash failed"
          exit 1
        fi
        
        echo ""
        echo "=== Test 2: CMake + make geosx_python_tools integration ==="
        
        # Now try the full integration test with CMake and make
        echo "Attempting CMake configuration for make geosx_python_tools target..."
        
        # Try a minimal CMake configuration - if it fails due to TPL issues, that's OK
        # We just want to test if we can get to the point where the Python tools target exists
        set +e  # Don't exit on CMake errors
        CMAKE_SUCCESS=false
        
        # Try minimal configuration first
        if cmake "$SOURCE_DIR" \
          -DCMAKE_BUILD_TYPE=Release \
          -DGEOS_PYTHON_PACKAGES_BRANCH="$CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME" \
          -DGEOS_TPL_DIR="" 2>&1 | tee cmake_output.log; then
          CMAKE_SUCCESS=true
          echo "CMake configuration succeeded!"
        else
          echo "CMake configuration failed, checking if Python tools target is still available..."
        fi
        
        set -e  # Re-enable exit on error
        
        # Check if make targets are available regardless of CMake success
        if make help 2>/dev/null | grep -q geosx_python_tools; then
          echo "Found 'make geosx_python_tools' target!"
          
          # Try to build the Python tools target
          echo "Testing 'make geosx_python_tools' command..."
          set +e
          if make geosx_python_tools -j2 2>&1 | tee make_output.log; then
            echo "'make geosx_python_tools' succeeded!"
            
            # Check if the binaries were created by make
            if [ -f "bin/preprocess_xml" ] && [ -f "bin/format_xml" ]; then
              echo "Make created Python tool binaries:"
              ls -la bin/
              
              # Test functionality
              if bin/preprocess_xml --help > /dev/null 2>&1 && bin/format_xml --help > /dev/null 2>&1; then
                echo "Make-built tools are functional"
                echo "FULL CMAKE + MAKE INTEGRATION TEST PASSED!"
              else
                echo "Make-built tools exist but may have functionality issues"
                echo "Integration test passed (tools were built)"
              fi
            else
              echo "Make completed but binaries not found in expected location"
              echo "Checking build directory contents:"
              find . -name "preprocess_xml" -o -name "format_xml" 2>/dev/null || echo "No tool binaries found"
            fi
          else
            echo "'make geosx_python_tools' failed"
            echo "This may be due to missing TPL dependencies"
            echo "But direct script execution worked, so integration is functional"
            echo "Integration test passed (direct method works)"
          fi
          set -e
        else
          echo "'make geosx_python_tools' target not found"
          if [ "$CMAKE_SUCCESS" = "false" ]; then
            echo "This is expected since CMake configuration failed"
            echo "But direct script execution worked, so integration is functional"
            echo "Integration test passed (direct method works)"
          else
            echo "CMake succeeded but Python tools target missing"
            echo "Available targets:"
            make help 2>/dev/null | head -10 || echo "No make targets available"
            exit 1
          fi
        fi
        
        cd "$GEOSPYTHONPACKAGES_ROOT"
        echo ""
        
        # Verify geosPythonPackages repository structure (basic sanity check)
        echo "Verifying geosPythonPackages repository structure..."
        
        # The real integration test is whether GEOS can successfully use this repository
        # This is just a basic sanity check that we have the right repository structure
        
        CRITICAL_STRUCTURE_OK=true
        
        if [ -d "geos-xml-tools" ]; then
          echo "Found geos-xml-tools directory"
        else
          echo "Missing geos-xml-tools directory"
          CRITICAL_STRUCTURE_OK=false
        fi
        
        if [ -f "install_packages.sh" ]; then
          echo "Found install_packages.sh"
        else
          echo "Missing install_packages.sh" 
          CRITICAL_STRUCTURE_OK=false
        fi
        
        # Count geos-* directories
        GEOS_DIRS=$(find . -maxdepth 1 -name "geos-*" -type d | wc -l)
        echo "Found $GEOS_DIRS geos-* package directories"
        
        if [ "$GEOS_DIRS" -lt 3 ]; then
          echo "Expected at least 3 geos-* directories, found $GEOS_DIRS"
          CRITICAL_STRUCTURE_OK=false
        fi
        
        if [ "$CRITICAL_STRUCTURE_OK" != "true" ]; then
          echo "Repository structure validation failed"
          echo "This doesn't appear to be a valid geosPythonPackages repository"
          exit 1
        fi
        
        echo "Repository structure validation passed"
        echo "The real integration test was GEOS successfully using this repository via setupPythonEnvironment.bash"
        echo ""
        
        echo "GEOS integration test completed successfully for Python ${{ matrix.python-version }}"

  integration_summary:
    name: GEOS Integration Summary
    runs-on: ubuntu-latest
    needs: test_geos_integration
    if: always() # Ensures this job runs even if some matrix jobs fail

    steps:
    - name: Summarize Python version results
      run: |
        # This script parses the results of the matrix jobs to provide a detailed summary.
        # It uses 'jq' to process the JSON from the 'needs.test_geos_integration.jobs' context.
        RESULTS_JSON='${{ toJSON(needs.test_geos_integration.jobs) }}'
        ANY_FAILED=false

        echo "## GEOS Integration Test Summary"
        echo ""

        # Use process substitution to read from jq's output for each job in the matrix
        while IFS=':' read -r version result; do
          if [ "$result" == "success" ]; then
            echo "| Python $version | Pass |"
          else
            echo "| Python $version | Fail |"
            ANY_FAILED=true
          fi
        done < <(echo "$RESULTS_JSON" | jq -r 'to_entries[] | "\(.key):\(.value.result)"')

        echo ""

        # Provide a final conclusion and fail the job if any version failed
        if [ "$ANY_FAILED" = "true" ]; then
          echo "**Conclusion:** At least one Python version failed the integration tests."
          echo "Please review the logs for the failing job(s) to diagnose the issue."
          exit 1
        else
          echo "**Conclusion:** All Python versions passed the integration tests successfully!"
        fi