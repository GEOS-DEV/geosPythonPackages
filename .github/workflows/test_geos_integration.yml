name: Test GEOS Integration

on:
  workflow_call:
  workflow_dispatch:

jobs:
  setup:
    # need to dynamically determine the GEOS TPL tag from the GEOS repository
    name: Determine GEOS TPL Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout GEOS for devcontainer file
        uses: actions/checkout@v4
        with:
          repository: GEOS-DEV/GEOS
          ref: develop
          path: GEOS

      - name: Extract TPL tag from devcontainer.json
        id: get_tag
        run: |
          TPL_TAG=$(jq -r '.build.args.GEOS_TPL_TAG' GEOS/.devcontainer/devcontainer.json)
          echo "tag=${TPL_TAG}" >> $GITHUB_OUTPUT

  test_geos_integration:
    name: Test geosPythonPackages Integration with GEOS
    runs-on: ubuntu-latest
    needs: setup
    
    container: 
      image: geosx/ubuntu22.04-gcc12:${{ needs.setup.outputs.tag }}

    steps:
    - name: Checkout geosPythonPackages
      uses: actions/checkout@v4
      with:
        path: geosPythonPackages
    
    - name: Checkout GEOS
      uses: actions/checkout@v4
      with:
        repository: GEOS-DEV/GEOS
        ref: develop
        path: GEOS
        submodules: recursive

    - name: Install Build Dependencies
      run: |
        apt-get update
        apt-get install -y make python3-numpy python3-dev python3-venv python3-pip
        
        # Ensure pip installs scripts to /usr/local/bin 
        export PATH="/usr/local/bin:$PATH"
        echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV
        
        # Set environment variables to handle setuptools/distutils issues
        echo "SETUPTOOLS_USE_DISTUTILS=stdlib" >> $GITHUB_ENV
        echo "PIP_DISABLE_PIP_VERSION_CHECK=1" >> $GITHUB_ENV
        echo "PYTHONDONTWRITEBYTECODE=1" >> $GITHUB_ENV

    - name: Setup test environment
      run: |
        echo "Setting up test environment..."
        GEOS_ROOT="$(pwd)/GEOS"
        SETUP_PYTHON_ENVIRONMENT_SCRIPT="$GEOS_ROOT/scripts/setupPythonEnvironment.bash"

        if [ -n "${{ github.head_ref }}" ]; then
          CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME="${{ github.head_ref }}"
        else
          CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME="${{ github.ref_name }}"
        fi
        
        echo "GEOS_ROOT=$GEOS_ROOT" >> $GITHUB_ENV
        echo "SETUP_PYTHON_ENVIRONMENT_SCRIPT=$SETUP_PYTHON_ENVIRONMENT_SCRIPT" >> $GITHUB_ENV
        echo "CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME=$CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME" >> $GITHUB_ENV
        
        echo "GEOS Root: $GEOS_ROOT"
        echo "Branch Name: $CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME"
        
        mkdir -p build_test
    
    - name: "Configure GEOS"
      working-directory: ./GEOS
      run: |
        echo "=== Configuring GEOS Build ==="
        python3 scripts/config-build.py \
          -hc /spack-generated.cmake \
          -bt Release \
          -bp ../build_test \
          -DENABLE_HYPRE=ON \
          -DENABLE_PYGEOSX=ON \
          -DENABLE_ATS=OFF \
          -DENABLE_BENCHMARKS=OFF \
          -DENABLE_DOCS=OFF \
          -DENABLE_DOXYGEN=OFF \
          -DENABLE_MATHPRESSO=OFF \
          -DENABLE_PVTPackage=OFF \
          -DENABLE_TRILINOS=OFF \
          -DENABLE_UNCRUSTIFY=OFF \
          -DENABLE_XML_UPDATES=OFF \
          -DENABLE_YAPF=OFF \
          -DGEOS_ENABLE_TESTS=OFF \
          -DGEOS_ENABLE_CONTACT=OFF \
          -DGEOS_ENABLE_FLUIDFLOW=OFF \
          -DGEOS_ENABLE_INDUCEDSEISMICITY=OFF \
          -DGEOS_ENABLE_MULTIPHYSICS=OFF \
          -DGEOS_ENABLE_SIMPLEPDE=OFF \
          -DGEOS_ENABLE_SOLIDMECHANICS=OFF \
          -DGEOS_ENABLE_SURFACEGENERATION=OFF \
          -DGEOS_PYTHON_PACKAGES_BRANCH=$CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME

    - name: "Build GEOS"
      working-directory: ./build_test
      run: |
        echo "=== Building GEOS ==="
        make -j8

    - name: "Test 1: Direct setupPythonEnvironment.bash execution"
      working-directory: ./build_test
      run: |
        echo "=== Test 1: Direct setupPythonEnvironment.bash execution ==="
        mkdir -p bin_direct
        
        # Create symlinks in /usr/bin so the setup script can find them
        echo "=== Creating symlinks for setup script compatibility ==="
        ln -sf /usr/local/bin/preprocess_xml /usr/bin/preprocess_xml
        ln -sf /usr/local/bin/format_xml /usr/bin/format_xml
        
        # Also create any other missing scripts that might be needed
        for script in convert_abaqus run_geos_ats setup_ats_environment geos_ats_log_check geos_ats_restart_check geos_ats_curve_check geos_ats_process_tests_fails mesh-doctor; do
          if [ -f "/usr/local/bin/$script" ]; then
            ln -sf "/usr/local/bin/$script" "/usr/bin/$script"
            echo "Created symlink for $script"
          fi
        done
        
        bash "$SETUP_PYTHON_ENVIRONMENT_SCRIPT" \
          -p $(which python3) \
          -b "$(pwd)/bin_direct" \
          --python-pkg-branch "$CURRENT_GEOSPYTHONPACKAGES_BRANCH_NAME" \
          --verbose
        
        if [ -f "bin_direct/preprocess_xml" ] && [ -f "bin_direct/format_xml" ]; then
          echo "Direct setupPythonEnvironment.bash succeeded!"
        else
          echo "Direct method failed to create Python tools"
          echo "=== Debugging: Checking what exists ==="
          echo "Scripts in bin_direct:"
          ls -la bin_direct/ || echo "bin_direct directory is empty"
          echo "Scripts that exist in PATH:"
          which preprocess_xml format_xml 2>/dev/null || echo "Scripts not found in PATH"
          exit 1
        fi

    - name: "Test 2: make geosx_python_tools"
      working-directory: ./build_test
      run: |
        echo "=== Test 2: make geosx_python_tools ==="
        make geosx_python_tools -j8

        if [ -f "bin/preprocess_xml" ] && [ -f "bin/format_xml" ]; then
          echo "make geosx_python_tools succeeded!"
        else
          echo "CMake method failed to create Python tools"
          exit 1
        fi

    - name: "Test 3: make geosx_python_tools_clean"
      working-directory: ./build_test
      run: |
        echo "=== Test 3: make geosx_python_tools_clean ==="
        make geosx_python_tools_clean
        
        if [ ! -f "bin/preprocess_xml" ] && [ ! -f "bin/format_xml" ]; then
          echo "Python tools successfully removed by clean target"
        else
          echo "Warning: Python tools still exist after clean"
          exit 1
        fi
        
        # Rebuilding tools here because the next test ('make ..._test') requires them.
        echo "Rebuilding tools for next test..."
        make geosx_python_tools -j8

    - name: "Test 4: make geosx_python_tools_test"
      working-directory: ./build_test
      run: |
        echo "=== Test 4: make geosx_python_tools_test ==="
        
        # Check if python directory exists and create if needed
        echo "Checking for python directory..."
        if [ ! -d "python" ]; then
          echo "Creating missing python directory..."
          mkdir -p python
        fi
        
        echo "Contents of build directory:"
        ls -la .
        
        echo "Running geosx_python_tools_test..."
        if make geosx_python_tools_test; then
          echo "make geosx_python_tools_test succeeded!"
        else
          echo "make geosx_python_tools_test failed"
          echo "=== Debugging information ==="
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la .
          echo "Looking for python-related directories:"
          find . -name "*python*" -type d 2>/dev/null || echo "No python directories found"
          exit 1
        fi

    - name: "Test 5: make geosx_format_all_xml_files"
      working-directory: ./build_test
      run: |
        echo "=== Test 5: make geosx_format_all_xml_files ==="
        mkdir -p test_xml
        cat > test_xml/test.xml << 'EOF'
        <?xml version="1.0" ?>
        <Problem>
          <Mesh>
            <InternalMesh name="mesh1" elementTypes="{C3D8}" xCoords="{0, 1}" yCoords="{0, 1}" zCoords="{0, 1}" nx="{1}" ny="{1}" nz="{1}"/>
          </Mesh>
        </Problem>
        EOF
        
        if make geosx_format_all_xml_files; then
          echo "make geosx_format_all_xml_files succeeded!"
        else
          echo "make geosx_format_all_xml_files failed"
          exit 1
        fi

  integration_summary:
    name: GEOS Integration Summary
    runs-on: ubuntu-latest
    needs: test_geos_integration
    if: always()
    steps:
      - name: Summarize Results
        run: |
          echo "## GEOS Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.test_geos_integration.result }}" == "success" ]]; then
            echo "All integration tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "Integration tests failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi