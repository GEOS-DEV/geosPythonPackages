"""This file was generated by xsdata, v24.4, on 2024-04-23 11:59:25

Generator: PydanticGenerator
See: https://xsdata.readthedocs.io/
"""

# ruff: noqa

from __future__ import annotations

from dataclasses import field
from typing import List, Optional

from pydantic.dataclasses import dataclass


@dataclass( kw_only=True )
class Aquifer:

    class Meta:
        name = "AquiferType"

    allow_all_phases_into_aquifer: str = field(
        default="0",
        metadata={
            "name": "allowAllPhasesIntoAquifer",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    aquifer_angle: str = field(
        metadata={
            "name": "aquiferAngle",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_elevation: str = field(
        metadata={
            "name": "aquiferElevation",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_initial_pressure: str = field(
        metadata={
            "name": "aquiferInitialPressure",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_inner_radius: str = field(
        metadata={
            "name": "aquiferInnerRadius",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_permeability: str = field(
        metadata={
            "name": "aquiferPermeability",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_porosity: str = field(
        metadata={
            "name": "aquiferPorosity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_thickness: str = field(
        metadata={
            "name": "aquiferThickness",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_total_compressibility: str = field(
        metadata={
            "name": "aquiferTotalCompressibility",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_water_density: str = field(
        metadata={
            "name": "aquiferWaterDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    aquifer_water_phase_component_fraction: str = field(
        default="{0}",
        metadata={
            "name":
            "aquiferWaterPhaseComponentFraction",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    aquifer_water_phase_component_names: str = field(
        default="{}",
        metadata={
            "name": "aquiferWaterPhaseComponentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    aquifer_water_viscosity: str = field(
        metadata={
            "name": "aquiferWaterViscosity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    bc_application_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "bcApplicationTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    begin_time: str = field(
        default="-1e+99",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    direction: str = field(
        default="{0,0,0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    end_time: str = field(
        default="1e+99",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    function_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "functionName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    initial_condition: str = field(
        default="0",
        metadata={
            "name": "initialCondition",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    pressure_influence_function_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "pressureInfluenceFunctionName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    scale: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    set_names: str = field(
        metadata={
            "name": "setNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class BiotPorosity:

    class Meta:
        name = "BiotPorosityType"

    default_porosity_tec: str = field(
        default="0",
        metadata={
            "name": "defaultPorosityTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_reference_porosity: str = field(
        metadata={
            "name": "defaultReferencePorosity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    grain_bulk_modulus: str = field(
        metadata={
            "name": "grainBulkModulus",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    use_uniaxial_fixed_stress: str = field(
        default="0",
        metadata={
            "name": "useUniaxialFixedStress",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class BlackOilFluid:

    class Meta:
        name = "BlackOilFluidType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_molar_weight: str = field(
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    hydrocarbon_formation_vol_factor_table_names: str = field(
        default="{}",
        metadata={
            "name": "hydrocarbonFormationVolFactorTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    hydrocarbon_viscosity_table_names: str = field(
        default="{}",
        metadata={
            "name": "hydrocarbonViscosityTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    surface_densities: str = field(
        metadata={
            "name":
            "surfaceDensities",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    table_files: str = field(
        default="{}",
        metadata={
            "name": "tableFiles",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        },
    )
    water_compressibility: str = field(
        default="0",
        metadata={
            "name": "waterCompressibility",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    water_formation_volume_factor: str = field(
        default="0",
        metadata={
            "name": "waterFormationVolumeFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    water_reference_pressure: str = field(
        default="0",
        metadata={
            "name": "waterReferencePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    water_viscosity: str = field(
        default="0",
        metadata={
            "name": "waterViscosity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Blueprint:

    class Meta:
        name = "BlueprintType"

    child_directory: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "childDirectory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    output_full_quadrature_data: str = field(
        default="0",
        metadata={
            "name": "outputFullQuadratureData",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    parallel_threads: str = field(
        default="1",
        metadata={
            "name": "parallelThreads",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    plot_level: str = field(
        default="1",
        metadata={
            "name": "plotLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Box:

    class Meta:
        name = "BoxType"

    strike: str = field(
        default="-90",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    x_max: str = field(
        metadata={
            "name":
            "xMax",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    x_min: str = field(
        metadata={
            "name":
            "xMin",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class BrooksCoreyBakerRelativePermeability:

    class Meta:
        name = "BrooksCoreyBakerRelativePermeabilityType"

    gas_oil_rel_perm_exponent: str = field(
        default="{1}",
        metadata={
            "name":
            "gasOilRelPermExponent",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    gas_oil_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "gasOilRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_min_volume_fraction: str = field(
        default="{0}",
        metadata={
            "name":
            "phaseMinVolumeFraction",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    water_oil_rel_perm_exponent: str = field(
        default="{1}",
        metadata={
            "name":
            "waterOilRelPermExponent",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    water_oil_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "waterOilRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class BrooksCoreyCapillaryPressure:

    class Meta:
        name = "BrooksCoreyCapillaryPressureType"

    cap_pressure_epsilon: str = field(
        default="1e-06",
        metadata={
            "name": "capPressureEpsilon",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    phase_cap_pressure_exponent_inv: str = field(
        default="{2}",
        metadata={
            "name":
            "phaseCapPressureExponentInv",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_entry_pressure: str = field(
        default="{1}",
        metadata={
            "name":
            "phaseEntryPressure",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_min_volume_fraction: str = field(
        default="{0}",
        metadata={
            "name":
            "phaseMinVolumeFraction",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class BrooksCoreyRelativePermeability:

    class Meta:
        name = "BrooksCoreyRelativePermeabilityType"

    phase_min_volume_fraction: str = field(
        default="{0}",
        metadata={
            "name":
            "phaseMinVolumeFraction",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    phase_rel_perm_exponent: str = field(
        default="{1}",
        metadata={
            "name":
            "phaseRelPermExponent",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "phaseRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class BrooksCoreyStone2RelativePermeability:

    class Meta:
        name = "BrooksCoreyStone2RelativePermeabilityType"

    gas_oil_rel_perm_exponent: str = field(
        default="{1}",
        metadata={
            "name":
            "gasOilRelPermExponent",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    gas_oil_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "gasOilRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_min_volume_fraction: str = field(
        default="{0}",
        metadata={
            "name":
            "phaseMinVolumeFraction",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    water_oil_rel_perm_exponent: str = field(
        default="{1}",
        metadata={
            "name":
            "waterOilRelPermExponent",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    water_oil_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "waterOilRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Co2BrineEzrokhiFluid:

    class Meta:
        name = "CO2BrineEzrokhiFluidType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_molar_weight: str = field(
        default="{0}",
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    flash_model_para_file: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "flashModelParaFile",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    phase_names: str = field(
        default="{}",
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_pvtpara_files: str = field(
        metadata={
            "name": "phasePVTParaFiles",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        } )
    solubility_table_names: str = field(
        default="{}",
        metadata={
            "name": "solubilityTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Co2BrineEzrokhiThermalFluid:

    class Meta:
        name = "CO2BrineEzrokhiThermalFluidType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_molar_weight: str = field(
        default="{0}",
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    flash_model_para_file: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "flashModelParaFile",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    phase_names: str = field(
        default="{}",
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_pvtpara_files: str = field(
        metadata={
            "name": "phasePVTParaFiles",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        } )
    solubility_table_names: str = field(
        default="{}",
        metadata={
            "name": "solubilityTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Co2BrinePhillipsFluid:

    class Meta:
        name = "CO2BrinePhillipsFluidType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_molar_weight: str = field(
        default="{0}",
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    flash_model_para_file: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "flashModelParaFile",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    phase_names: str = field(
        default="{}",
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_pvtpara_files: str = field(
        metadata={
            "name": "phasePVTParaFiles",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        } )
    solubility_table_names: str = field(
        default="{}",
        metadata={
            "name": "solubilityTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Co2BrinePhillipsThermalFluid:

    class Meta:
        name = "CO2BrinePhillipsThermalFluidType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_molar_weight: str = field(
        default="{0}",
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    flash_model_para_file: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "flashModelParaFile",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    phase_names: str = field(
        default="{}",
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_pvtpara_files: str = field(
        metadata={
            "name": "phasePVTParaFiles",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        } )
    solubility_table_names: str = field(
        default="{}",
        metadata={
            "name": "solubilityTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CarmanKozenyPermeability:

    class Meta:
        name = "CarmanKozenyPermeabilityType"

    anisotropy: str = field(
        default="{1,1,1}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    particle_diameter: str = field(
        metadata={
            "name": "particleDiameter",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    sphericity: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CellElementRegion:

    class Meta:
        name = "CellElementRegionType"

    cell_blocks: str = field(
        metadata={
            "name": "cellBlocks",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    coarsening_ratio: str = field(
        default="0",
        metadata={
            "name": "coarseningRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    material_list: str = field(
        metadata={
            "name": "materialList",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    mesh_body: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "meshBody",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CeramicDamage:

    class Meta:
        name = "CeramicDamageType"

    compressive_strength: str = field(
        metadata={
            "name": "compressiveStrength",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    crack_speed: str = field(
        metadata={
            "name": "crackSpeed",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    maximum_strength: str = field(
        metadata={
            "name": "maximumStrength",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    tensile_strength: str = field(
        metadata={
            "name": "tensileStrength",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ChomboIo:

    class Meta:
        name = "ChomboIOType"

    begin_cycle: str = field(
        metadata={
            "name": "beginCycle",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    child_directory: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "childDirectory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    input_path: str = field(
        default="/INVALID_INPUT_PATH",
        metadata={
            "name": "inputPath",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    output_path: str = field( metadata={
        "name": "outputPath",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    parallel_threads: str = field(
        default="1",
        metadata={
            "name": "parallelThreads",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    use_chombo_pressures: str = field(
        default="0",
        metadata={
            "name": "useChomboPressures",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    wait_for_input: str = field( metadata={
        "name": "waitForInput",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositeFunction:

    class Meta:
        name = "CompositeFunctionType"

    expression: Optional[ str ] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    function_names: str = field(
        default="{}",
        metadata={
            "name": "functionNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    input_var_names: str = field(
        default="{}",
        metadata={
            "name": "inputVarNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    variable_names: str = field(
        default="{}",
        metadata={
            "name": "variableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositionalMultiphaseFluid:

    class Meta:
        name = "CompositionalMultiphaseFluidType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_acentric_factor: str = field(
        metadata={
            "name":
            "componentAcentricFactor",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_binary_coeff: str = field(
        default="{{0}}",
        metadata={
            "name":
            "componentBinaryCoeff",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    component_critical_pressure: str = field(
        metadata={
            "name":
            "componentCriticalPressure",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_critical_temperature: str = field(
        metadata={
            "name":
            "componentCriticalTemperature",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_molar_weight: str = field(
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_names: str = field(
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    component_volume_shift: str = field(
        default="{0}",
        metadata={
            "name":
            "componentVolumeShift",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    equations_of_state: str = field(
        metadata={
            "name": "equationsOfState",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositionalMultiphaseReservoirPoromechanicsInitialization:

    class Meta:
        name = "CompositionalMultiphaseReservoirPoromechanicsInitializationType"

    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    perform_stress_initialization: str = field(
        metadata={
            "name": "performStressInitialization",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        } )
    poromechanics_solver_name: str = field(
        metadata={
            "name": "poromechanicsSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositionalMultiphaseStatistics:

    class Meta:
        name = "CompositionalMultiphaseStatisticsType"

    compute_cflnumbers: str = field(
        default="0",
        metadata={
            "name": "computeCFLNumbers",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    compute_region_statistics: str = field(
        default="1",
        metadata={
            "name": "computeRegionStatistics",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    relperm_threshold: str = field(
        default="1e-06",
        metadata={
            "name": "relpermThreshold",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    write_csv: str = field(
        default="0",
        metadata={
            "name": "writeCSV",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositonalTwoPhaseFluidPengRobinson:

    class Meta:
        name = "CompositonalTwoPhaseFluidPengRobinsonType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_acentric_factor: str = field(
        metadata={
            "name":
            "componentAcentricFactor",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_binary_coeff: str = field(
        default="{{0}}",
        metadata={
            "name":
            "componentBinaryCoeff",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    component_critical_pressure: str = field(
        metadata={
            "name":
            "componentCriticalPressure",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_critical_temperature: str = field(
        metadata={
            "name":
            "componentCriticalTemperature",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_critical_volume: str = field(
        default="{0}",
        metadata={
            "name":
            "componentCriticalVolume",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    component_molar_weight: str = field(
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_names: str = field(
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    component_volume_shift: str = field(
        default="{0}",
        metadata={
            "name":
            "componentVolumeShift",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositonalTwoPhaseFluidSoaveRedlichKwong:

    class Meta:
        name = "CompositonalTwoPhaseFluidSoaveRedlichKwongType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_acentric_factor: str = field(
        metadata={
            "name":
            "componentAcentricFactor",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_binary_coeff: str = field(
        default="{{0}}",
        metadata={
            "name":
            "componentBinaryCoeff",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    component_critical_pressure: str = field(
        metadata={
            "name":
            "componentCriticalPressure",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_critical_temperature: str = field(
        metadata={
            "name":
            "componentCriticalTemperature",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_critical_volume: str = field(
        default="{0}",
        metadata={
            "name":
            "componentCriticalVolume",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    component_molar_weight: str = field(
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_names: str = field(
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    component_volume_shift: str = field(
        default="{0}",
        metadata={
            "name":
            "componentVolumeShift",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompressibleSinglePhaseFluid:

    class Meta:
        name = "CompressibleSinglePhaseFluidType"

    compressibility: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_viscosity: str = field(
        metadata={
            "name": "defaultViscosity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    density_model_type: str = field(
        default="linear",
        metadata={
            "name": "densityModelType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|exponential|linear|quadratic",
        },
    )
    reference_density: str = field(
        default="1000",
        metadata={
            "name": "referenceDensity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_pressure: str = field(
        default="0",
        metadata={
            "name": "referencePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_viscosity: str = field(
        default="0.001",
        metadata={
            "name": "referenceViscosity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    viscosibility: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    viscosity_model_type: str = field(
        default="linear",
        metadata={
            "name": "viscosityModelType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|exponential|linear|quadratic",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompressibleSolidCarmanKozenyPermeability:

    class Meta:
        name = "CompressibleSolidCarmanKozenyPermeabilityType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompressibleSolidConstantPermeability:

    class Meta:
        name = "CompressibleSolidConstantPermeabilityType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompressibleSolidExponentialDecayPermeability:

    class Meta:
        name = "CompressibleSolidExponentialDecayPermeabilityType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompressibleSolidParallelPlatesPermeability:

    class Meta:
        name = "CompressibleSolidParallelPlatesPermeabilityType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompressibleSolidSlipDependentPermeability:

    class Meta:
        name = "CompressibleSolidSlipDependentPermeabilityType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompressibleSolidWillisRichardsPermeability:

    class Meta:
        name = "CompressibleSolidWillisRichardsPermeabilityType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ConstantDiffusion:

    class Meta:
        name = "ConstantDiffusionType"

    default_phase_diffusivity_multipliers: str = field(
        default="{1}",
        metadata={
            "name":
            "defaultPhaseDiffusivityMultipliers",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    diffusivity_components: str = field(
        metadata={
            "name":
            "diffusivityComponents",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ConstantPermeability:

    class Meta:
        name = "ConstantPermeabilityType"

    permeability_components: str = field(
        metadata={
            "name":
            "permeabilityComponents",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Coulomb:

    class Meta:
        name = "CoulombType"

    aperture_table_name: str = field( metadata={
        "name": "apertureTableName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    aperture_tolerance: str = field(
        default="1e-09",
        metadata={
            "name": "apertureTolerance",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    cohesion: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    displacement_jump_threshold: str = field(
        default="2.22045e-16",
        metadata={
            "name": "displacementJumpThreshold",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    friction_coefficient: str = field(
        metadata={
            "name": "frictionCoefficient",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    penalty_stiffness: str = field(
        default="0",
        metadata={
            "name": "penaltyStiffness",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    shear_stiffness: str = field(
        default="0",
        metadata={
            "name": "shearStiffness",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CustomPolarObject:

    class Meta:
        name = "CustomPolarObjectType"

    center: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    coefficients: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    length_vector: str = field(
        metadata={
            "name":
            "lengthVector",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    normal: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    tolerance: str = field(
        default="1e-05",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    width_vector: str = field(
        metadata={
            "name":
            "widthVector",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Cylinder:

    class Meta:
        name = "CylinderType"

    first_face_center: str = field(
        metadata={
            "name":
            "firstFaceCenter",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    inner_radius: str = field(
        default="-1",
        metadata={
            "name": "innerRadius",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    outer_radius: str = field(
        metadata={
            "name": "outerRadius",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    second_face_center: str = field(
        metadata={
            "name":
            "secondFaceCenter",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class DamageElasticIsotropic:

    class Meta:
        name = "DamageElasticIsotropicType"

    compressive_strength: str = field(
        default="0",
        metadata={
            "name": "compressiveStrength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    critical_fracture_energy: str = field(
        metadata={
            "name": "criticalFractureEnergy",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    critical_strain_energy: str = field(
        metadata={
            "name": "criticalStrainEnergy",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    degradation_lower_limit: str = field(
        default="0",
        metadata={
            "name": "degradationLowerLimit",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    delta_coefficient: str = field(
        default="-1",
        metadata={
            "name": "deltaCoefficient",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    ext_driving_force_flag: str = field(
        default="0",
        metadata={
            "name": "extDrivingForceFlag",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    length_scale: str = field(
        metadata={
            "name": "lengthScale",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    tensile_strength: str = field(
        default="0",
        metadata={
            "name": "tensileStrength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class DamageSpectralElasticIsotropic:

    class Meta:
        name = "DamageSpectralElasticIsotropicType"

    compressive_strength: str = field(
        default="0",
        metadata={
            "name": "compressiveStrength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    critical_fracture_energy: str = field(
        metadata={
            "name": "criticalFractureEnergy",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    critical_strain_energy: str = field(
        metadata={
            "name": "criticalStrainEnergy",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    degradation_lower_limit: str = field(
        default="0",
        metadata={
            "name": "degradationLowerLimit",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    delta_coefficient: str = field(
        default="-1",
        metadata={
            "name": "deltaCoefficient",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    ext_driving_force_flag: str = field(
        default="0",
        metadata={
            "name": "extDrivingForceFlag",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    length_scale: str = field(
        metadata={
            "name": "lengthScale",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    tensile_strength: str = field(
        default="0",
        metadata={
            "name": "tensileStrength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class DamageVolDevElasticIsotropic:

    class Meta:
        name = "DamageVolDevElasticIsotropicType"

    compressive_strength: str = field(
        default="0",
        metadata={
            "name": "compressiveStrength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    critical_fracture_energy: str = field(
        metadata={
            "name": "criticalFractureEnergy",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    critical_strain_energy: str = field(
        metadata={
            "name": "criticalStrainEnergy",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    degradation_lower_limit: str = field(
        default="0",
        metadata={
            "name": "degradationLowerLimit",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    delta_coefficient: str = field(
        default="-1",
        metadata={
            "name": "deltaCoefficient",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    ext_driving_force_flag: str = field(
        default="0",
        metadata={
            "name": "extDrivingForceFlag",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    length_scale: str = field(
        metadata={
            "name": "lengthScale",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    tensile_strength: str = field(
        default="0",
        metadata={
            "name": "tensileStrength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class DeadOilFluid:

    class Meta:
        name = "DeadOilFluidType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_molar_weight: str = field(
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    hydrocarbon_formation_vol_factor_table_names: str = field(
        default="{}",
        metadata={
            "name": "hydrocarbonFormationVolFactorTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    hydrocarbon_viscosity_table_names: str = field(
        default="{}",
        metadata={
            "name": "hydrocarbonViscosityTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    surface_densities: str = field(
        metadata={
            "name":
            "surfaceDensities",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    table_files: str = field(
        default="{}",
        metadata={
            "name": "tableFiles",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        },
    )
    water_compressibility: str = field(
        default="0",
        metadata={
            "name": "waterCompressibility",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    water_formation_volume_factor: str = field(
        default="0",
        metadata={
            "name": "waterFormationVolumeFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    water_reference_pressure: str = field(
        default="0",
        metadata={
            "name": "waterReferencePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    water_viscosity: str = field(
        default="0",
        metadata={
            "name": "waterViscosity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class DelftEgg:

    class Meta:
        name = "DelftEggType"

    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_csl_slope: str = field(
        default="1",
        metadata={
            "name": "defaultCslSlope",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_pre_consolidation_pressure: str = field(
        default="-1.5",
        metadata={
            "name": "defaultPreConsolidationPressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_recompression_index: str = field(
        default="0.002",
        metadata={
            "name": "defaultRecompressionIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shape_parameter: str = field(
        default="1",
        metadata={
            "name": "defaultShapeParameter",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_virgin_compression_index: str = field(
        default="0.005",
        metadata={
            "name": "defaultVirginCompressionIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Dirichlet:

    class Meta:
        name = "DirichletType"

    bc_application_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "bcApplicationTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    begin_time: str = field(
        default="-1e+99",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    component: str = field(
        default="-1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direction: str = field(
        default="{0,0,0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    end_time: str = field(
        default="1e+99",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    field_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "fieldName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    function_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "functionName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    initial_condition: str = field(
        default="0",
        metadata={
            "name": "initialCondition",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    object_path: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "objectPath",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    scale: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    set_names: str = field(
        metadata={
            "name": "setNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Disc:

    class Meta:
        name = "DiscType"

    center: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    length_vector: str = field(
        metadata={
            "name":
            "lengthVector",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    normal: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    radius: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    tolerance: str = field(
        default="1e-05",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    width_vector: str = field(
        metadata={
            "name":
            "widthVector",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class DruckerPrager:

    class Meta:
        name = "DruckerPragerType"

    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_cohesion: str = field(
        default="0",
        metadata={
            "name": "defaultCohesion",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_dilation_angle: str = field(
        default="30",
        metadata={
            "name": "defaultDilationAngle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_friction_angle: str = field(
        default="30",
        metadata={
            "name": "defaultFrictionAngle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_hardening_rate: str = field(
        default="0",
        metadata={
            "name": "defaultHardeningRate",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ElasticIsotropicPressureDependent:

    class Meta:
        name = "ElasticIsotropicPressureDependentType"

    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_recompression_index: str = field(
        default="0.002",
        metadata={
            "name": "defaultRecompressionIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_ref_pressure: str = field(
        default="-1",
        metadata={
            "name": "defaultRefPressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_ref_strain_vol: str = field(
        default="0",
        metadata={
            "name": "defaultRefStrainVol",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ElasticIsotropic:

    class Meta:
        name = "ElasticIsotropicType"

    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ElasticOrthotropic:

    class Meta:
        name = "ElasticOrthotropicType"

    default_c11: str = field(
        default="-1",
        metadata={
            "name": "defaultC11",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c12: str = field(
        default="-1",
        metadata={
            "name": "defaultC12",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c13: str = field(
        default="-1",
        metadata={
            "name": "defaultC13",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c22: str = field(
        default="-1",
        metadata={
            "name": "defaultC22",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c23: str = field(
        default="-1",
        metadata={
            "name": "defaultC23",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c33: str = field(
        default="-1",
        metadata={
            "name": "defaultC33",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c44: str = field(
        default="-1",
        metadata={
            "name": "defaultC44",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c55: str = field(
        default="-1",
        metadata={
            "name": "defaultC55",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c66: str = field(
        default="-1",
        metadata={
            "name": "defaultC66",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_e1: str = field(
        default="-1",
        metadata={
            "name": "defaultE1",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_e2: str = field(
        default="-1",
        metadata={
            "name": "defaultE2",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_e3: str = field(
        default="-1",
        metadata={
            "name": "defaultE3",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_g12: str = field(
        default="-1",
        metadata={
            "name": "defaultG12",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_g13: str = field(
        default="-1",
        metadata={
            "name": "defaultG13",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_g23: str = field(
        default="-1",
        metadata={
            "name": "defaultG23",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_nu12: str = field(
        default="-1",
        metadata={
            "name": "defaultNu12",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_nu13: str = field(
        default="-1",
        metadata={
            "name": "defaultNu13",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_nu23: str = field(
        default="-1",
        metadata={
            "name": "defaultNu23",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ElasticTransverseIsotropic:

    class Meta:
        name = "ElasticTransverseIsotropicType"

    default_c11: str = field(
        default="-1",
        metadata={
            "name": "defaultC11",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c13: str = field(
        default="-1",
        metadata={
            "name": "defaultC13",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c33: str = field(
        default="-1",
        metadata={
            "name": "defaultC33",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c44: str = field(
        default="-1",
        metadata={
            "name": "defaultC44",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_c66: str = field(
        default="-1",
        metadata={
            "name": "defaultC66",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio_axial_transverse: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatioAxialTransverse",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio_transverse: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatioTransverse",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus_axial_transverse: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulusAxialTransverse",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus_axial: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulusAxial",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus_transverse: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulusTransverse",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ExponentialDecayPermeability:

    class Meta:
        name = "ExponentialDecayPermeabilityType"

    empirical_constant: str = field(
        metadata={
            "name": "empiricalConstant",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    initial_permeability: str = field(
        metadata={
            "name":
            "initialPermeability",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ExtendedDruckerPrager:

    class Meta:
        name = "ExtendedDruckerPragerType"

    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_cohesion: str = field(
        default="0",
        metadata={
            "name": "defaultCohesion",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_dilation_ratio: str = field(
        default="1",
        metadata={
            "name": "defaultDilationRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_hardening: str = field(
        default="0",
        metadata={
            "name": "defaultHardening",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_initial_friction_angle: str = field(
        default="30",
        metadata={
            "name": "defaultInitialFrictionAngle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_residual_friction_angle: str = field(
        default="30",
        metadata={
            "name": "defaultResidualFrictionAngle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class FieldSpecification:

    class Meta:
        name = "FieldSpecificationType"

    bc_application_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "bcApplicationTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    begin_time: str = field(
        default="-1e+99",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    component: str = field(
        default="-1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direction: str = field(
        default="{0,0,0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    end_time: str = field(
        default="1e+99",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    field_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "fieldName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    function_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "functionName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    initial_condition: str = field(
        default="0",
        metadata={
            "name": "initialCondition",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    object_path: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "objectPath",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    scale: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    set_names: str = field(
        metadata={
            "name": "setNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class File:

    class Meta:
        name = "FileType"

    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
    } )


@dataclass( kw_only=True )
class FiniteElementSpace:

    class Meta:
        name = "FiniteElementSpaceType"

    formulation: str = field(
        default="default",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|default|SEM",
        },
    )
    order: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    use_virtual_elements: str = field(
        default="0",
        metadata={
            "name": "useVirtualElements",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class FrictionlessContact:

    class Meta:
        name = "FrictionlessContactType"

    aperture_table_name: str = field( metadata={
        "name": "apertureTableName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    aperture_tolerance: str = field(
        default="1e-09",
        metadata={
            "name": "apertureTolerance",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    displacement_jump_threshold: str = field(
        default="2.22045e-16",
        metadata={
            "name": "displacementJumpThreshold",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    penalty_stiffness: str = field(
        default="0",
        metadata={
            "name": "penaltyStiffness",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    shear_stiffness: str = field(
        default="0",
        metadata={
            "name": "shearStiffness",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class HaltEvent:

    class Meta:
        name = "HaltEventType"

    halt_event: List[ HaltEvent ] = field(
        default_factory=list,
        metadata={
            "name": "HaltEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    periodic_event: List[ PeriodicEvent ] = field(
        default_factory=list,
        metadata={
            "name": "PeriodicEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    solo_event: List[ SoloEvent ] = field(
        default_factory=list,
        metadata={
            "name": "SoloEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    begin_time: str = field(
        default="0",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    end_time: str = field(
        default="1e+100",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    final_dt_stretch: str = field(
        default="0.001",
        metadata={
            "name": "finalDtStretch",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    force_dt: str = field(
        default="-1",
        metadata={
            "name": "forceDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_event_dt: str = field(
        default="-1",
        metadata={
            "name": "maxEventDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_runtime: str = field(
        metadata={
            "name": "maxRuntime",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    target: Optional[ str ] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    target_exact_start_stop: str = field(
        default="1",
        metadata={
            "name": "targetExactStartStop",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class HybridMimeticDiscretization:

    class Meta:
        name = "HybridMimeticDiscretizationType"

    inner_product_type: str = field( metadata={
        "name": "innerProductType",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class HydrostaticEquilibrium:

    class Meta:
        name = "HydrostaticEquilibriumType"

    bc_application_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "bcApplicationTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    begin_time: str = field(
        default="-1e+99",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    component_fraction_vs_elevation_table_names: str = field(
        default="{}",
        metadata={
            "name": "componentFractionVsElevationTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    datum_elevation: str = field(
        metadata={
            "name": "datumElevation",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    datum_pressure: str = field(
        metadata={
            "name": "datumPressure",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    direction: str = field(
        default="{0,0,0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    elevation_increment_in_hydrostatic_pressure_table: str = field(
        default="0.6096",
        metadata={
            "name": "elevationIncrementInHydrostaticPressureTable",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    end_time: str = field(
        default="1e+99",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    equilibration_tolerance: str = field(
        default="0.001",
        metadata={
            "name": "equilibrationTolerance",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    function_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "functionName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    initial_phase_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "initialPhaseName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_number_of_equilibration_iterations: str = field(
        default="5",
        metadata={
            "name": "maxNumberOfEquilibrationIterations",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    object_path: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "objectPath",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    scale: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    temperature_vs_elevation_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "temperatureVsElevationTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class JfunctionCapillaryPressure:

    class Meta:
        name = "JFunctionCapillaryPressureType"

    non_wetting_intermediate_jfunction_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "nonWettingIntermediateJFunctionTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    non_wetting_intermediate_surface_tension: str = field(
        default="0",
        metadata={
            "name": "nonWettingIntermediateSurfaceTension",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    permeability_direction: str = field( metadata={
        "name": "permeabilityDirection",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|XY|X|Y|Z",
    } )
    permeability_exponent: str = field(
        default="0.5",
        metadata={
            "name": "permeabilityExponent",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    porosity_exponent: str = field(
        default="0.5",
        metadata={
            "name": "porosityExponent",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    wetting_intermediate_jfunction_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "wettingIntermediateJFunctionTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    wetting_intermediate_surface_tension: str = field(
        default="0",
        metadata={
            "name": "wettingIntermediateSurfaceTension",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    wetting_non_wetting_jfunction_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "wettingNonWettingJFunctionTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    wetting_non_wetting_surface_tension: str = field(
        default="0",
        metadata={
            "name": "wettingNonWettingSurfaceTension",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class LinearIsotropicDispersion:

    class Meta:
        name = "LinearIsotropicDispersionType"

    longitudinal_dispersivity: str = field(
        metadata={
            "name": "longitudinalDispersivity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class LinearSolverParameters:

    class Meta:
        name = "LinearSolverParametersType"

    amg_aggressive_coarsening_levels: str = field(
        default="0",
        metadata={
            "name": "amgAggressiveCoarseningLevels",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    amg_aggressive_coarsening_paths: str = field(
        default="1",
        metadata={
            "name": "amgAggressiveCoarseningPaths",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    amg_aggressive_interp_type: str = field(
        default="multipass",
        metadata={
            "name":
            "amgAggressiveInterpType",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|default|extendedIStage2|standardStage2|extendedStage2|multipass|modifiedExtended|modifiedExtendedI|modifiedExtendedE|modifiedMultipass",
        },
    )
    amg_coarse_solver: str = field(
        default="direct",
        metadata={
            "name": "amgCoarseSolver",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|default|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|direct|bgs",
        },
    )
    amg_coarsening_type: str = field(
        default="HMIS",
        metadata={
            "name": "amgCoarseningType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|default|CLJP|RugeStueben|Falgout|PMIS|HMIS",
        },
    )
    amg_interpolation_max_non_zeros: str = field(
        default="4",
        metadata={
            "name": "amgInterpolationMaxNonZeros",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    amg_interpolation_type: str = field(
        default="extendedI",
        metadata={
            "name":
            "amgInterpolationType",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|default|modifiedClassical|direct|multipass|extendedI|standard|extended|directBAMG|modifiedExtended|modifiedExtendedI|modifiedExtendedE",
        },
    )
    amg_null_space_type: str = field(
        default="constantModes",
        metadata={
            "name": "amgNullSpaceType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|constantModes|rigidBodyModes",
        },
    )
    amg_num_functions: str = field(
        default="1",
        metadata={
            "name": "amgNumFunctions",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    amg_num_sweeps: str = field(
        default="1",
        metadata={
            "name": "amgNumSweeps",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    amg_relax_weight: str = field(
        default="1",
        metadata={
            "name": "amgRelaxWeight",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    amg_separate_components: str = field(
        default="0",
        metadata={
            "name": "amgSeparateComponents",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    amg_smoother_type: str = field(
        default="l1sgs",
        metadata={
            "name": "amgSmootherType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|default|jacobi|l1jacobi|fgs|bgs|sgs|l1sgs|chebyshev|ilu0|ilut|ic0|ict",
        },
    )
    amg_threshold: str = field(
        default="0",
        metadata={
            "name": "amgThreshold",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    direct_check_residual: str = field(
        default="0",
        metadata={
            "name": "directCheckResidual",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direct_col_perm: str = field(
        default="metis",
        metadata={
            "name": "directColPerm",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|none|MMD_AtplusA|MMD_AtA|colAMD|metis|parmetis",
        },
    )
    direct_equil: str = field(
        default="1",
        metadata={
            "name": "directEquil",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direct_iter_ref: str = field(
        default="1",
        metadata={
            "name": "directIterRef",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direct_parallel: str = field(
        default="1",
        metadata={
            "name": "directParallel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direct_repl_tiny_pivot: str = field(
        default="1",
        metadata={
            "name": "directReplTinyPivot",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direct_row_perm: str = field(
        default="mc64",
        metadata={
            "name": "directRowPerm",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|none|mc64",
        },
    )
    ilu_fill: str = field(
        default="0",
        metadata={
            "name": "iluFill",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    ilu_threshold: str = field(
        default="0",
        metadata={
            "name": "iluThreshold",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    krylov_adaptive_tol: str = field(
        default="0",
        metadata={
            "name": "krylovAdaptiveTol",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    krylov_max_iter: str = field(
        default="200",
        metadata={
            "name": "krylovMaxIter",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    krylov_max_restart: str = field(
        default="200",
        metadata={
            "name": "krylovMaxRestart",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    krylov_tol: str = field(
        default="1e-06",
        metadata={
            "name": "krylovTol",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    krylov_weakest_tol: str = field(
        default="0.001",
        metadata={
            "name": "krylovWeakestTol",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    preconditioner_type: str = field(
        default="iluk",
        metadata={
            "name":
            "preconditionerType",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|none|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|iluk|ilut|icc|ict|amg|mgr|block|direct|bgs",
        },
    )
    solver_type: str = field(
        default="direct",
        metadata={
            "name": "solverType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|direct|cg|gmres|fgmres|bicgstab|preconditioner",
        },
    )
    stop_if_error: str = field(
        default="1",
        metadata={
            "name": "stopIfError",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )


@dataclass( kw_only=True )
class ModifiedCamClay:

    class Meta:
        name = "ModifiedCamClayType"

    default_csl_slope: str = field(
        default="1",
        metadata={
            "name": "defaultCslSlope",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_pre_consolidation_pressure: str = field(
        default="-1.5",
        metadata={
            "name": "defaultPreConsolidationPressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_recompression_index: str = field(
        default="0.002",
        metadata={
            "name": "defaultRecompressionIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_ref_pressure: str = field(
        default="-1",
        metadata={
            "name": "defaultRefPressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_ref_strain_vol: str = field(
        default="0",
        metadata={
            "name": "defaultRefStrainVol",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_virgin_compression_index: str = field(
        default="0.005",
        metadata={
            "name": "defaultVirginCompressionIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class MultiPhaseConstantThermalConductivity:

    class Meta:
        name = "MultiPhaseConstantThermalConductivityType"

    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    thermal_conductivity_components: str = field(
        metadata={
            "name":
            "thermalConductivityComponents",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class MultiPhaseVolumeWeightedThermalConductivity:

    class Meta:
        name = "MultiPhaseVolumeWeightedThermalConductivityType"

    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    phase_thermal_conductivity: str = field(
        metadata={
            "name":
            "phaseThermalConductivity",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    rock_thermal_conductivity_components: str = field(
        metadata={
            "name":
            "rockThermalConductivityComponents",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class MultiphasePoromechanicsInitialization:

    class Meta:
        name = "MultiphasePoromechanicsInitializationType"

    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    perform_stress_initialization: str = field(
        metadata={
            "name": "performStressInitialization",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        } )
    poromechanics_solver_name: str = field(
        metadata={
            "name": "poromechanicsSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class MultivariableTableFunction:

    class Meta:
        name = "MultivariableTableFunctionType"

    input_var_names: str = field(
        default="{}",
        metadata={
            "name": "inputVarNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class NonlinearSolverParameters:

    class Meta:
        name = "NonlinearSolverParametersType"

    allow_non_converged: str = field(
        default="0",
        metadata={
            "name": "allowNonConverged",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    coupling_type: str = field(
        default="FullyImplicit",
        metadata={
            "name": "couplingType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|FullyImplicit|Sequential",
        },
    )
    line_search_action: str = field(
        default="Attempt",
        metadata={
            "name": "lineSearchAction",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|None|Attempt|Require",
        },
    )
    line_search_cut_factor: str = field(
        default="0.5",
        metadata={
            "name": "lineSearchCutFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    line_search_interpolation_type: str = field(
        default="Linear",
        metadata={
            "name": "lineSearchInterpolationType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|Linear|Parabolic",
        },
    )
    line_search_max_cuts: str = field(
        default="4",
        metadata={
            "name": "lineSearchMaxCuts",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    line_search_starting_iteration: str = field(
        default="0",
        metadata={
            "name": "lineSearchStartingIteration",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_allowed_residual_norm: str = field(
        default="1e+09",
        metadata={
            "name": "maxAllowedResidualNorm",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_num_configuration_attempts: str = field(
        default="10",
        metadata={
            "name": "maxNumConfigurationAttempts",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_sub_steps: str = field(
        default="10",
        metadata={
            "name": "maxSubSteps",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_time_step_cuts: str = field(
        default="2",
        metadata={
            "name": "maxTimeStepCuts",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    min_normalizer: str = field(
        default="1e-12",
        metadata={
            "name": "minNormalizer",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    newton_max_iter: str = field(
        default="5",
        metadata={
            "name": "newtonMaxIter",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    newton_min_iter: str = field(
        default="1",
        metadata={
            "name": "newtonMinIter",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    newton_tol: str = field(
        default="1e-06",
        metadata={
            "name": "newtonTol",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    nonlinear_acceleration_type: str = field(
        default="None",
        metadata={
            "name": "nonlinearAccelerationType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|None|Aitken",
        },
    )
    sequential_convergence_criterion: str = field(
        default="ResidualNorm",
        metadata={
            "name": "sequentialConvergenceCriterion",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|ResidualNorm|NumberOfNonlinearIterations|SolutionIncrements",
        },
    )
    subcycling: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    time_step_cut_factor: str = field(
        default="0.5",
        metadata={
            "name": "timeStepCutFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_step_decrease_factor: str = field(
        default="0.5",
        metadata={
            "name": "timeStepDecreaseFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_step_decrease_iter_limit: str = field(
        default="0.7",
        metadata={
            "name": "timeStepDecreaseIterLimit",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_step_increase_factor: str = field(
        default="2",
        metadata={
            "name": "timeStepIncreaseFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_step_increase_iter_limit: str = field(
        default="0.4",
        metadata={
            "name": "timeStepIncreaseIterLimit",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    norm_type: str = field(
        default="Linfinity",
        metadata={
            "name": "normType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|Linfinity|L2",
        },
    )


@dataclass( kw_only=True )
class NullModel:

    class Meta:
        name = "NullModelType"

    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Pml:

    class Meta:
        name = "PMLType"

    bc_application_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "bcApplicationTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    begin_time: str = field(
        default="-1e+99",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    component: str = field(
        default="-1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direction: str = field(
        default="{0,0,0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    end_time: str = field(
        default="1e+99",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    function_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "functionName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    object_path: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "objectPath",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    reflectivity: str = field(
        default="0.001",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    scale: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    set_names: str = field(
        metadata={
            "name": "setNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    thickness_max_xyz: str = field(
        default="{-1,-1,-1}",
        metadata={
            "name":
            "thicknessMaxXYZ",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    thickness_min_xyz: str = field(
        default="{-1,-1,-1}",
        metadata={
            "name":
            "thicknessMinXYZ",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    wave_speed_max_xyz: str = field(
        default="{-1,-1,-1}",
        metadata={
            "name":
            "waveSpeedMaxXYZ",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    wave_speed_min_xyz: str = field(
        default="{-1,-1,-1}",
        metadata={
            "name":
            "waveSpeedMinXYZ",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    x_max: str = field(
        default="{3.40282e+38,3.40282e+38,3.40282e+38}",
        metadata={
            "name":
            "xMax",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    x_min: str = field(
        default="{-3.40282e+38,-3.40282e+38,-3.40282e+38}",
        metadata={
            "name":
            "xMin",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Pvtdriver:

    class Meta:
        name = "PVTDriverType"

    baseline: str = field(
        default="none",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    feed_composition: str = field(
        metadata={
            "name":
            "feedComposition",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    fluid: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output: str = field(
        default="none",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    output_compressibility: str = field(
        default="0",
        metadata={
            "name": "outputCompressibility",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output_phase_composition: str = field(
        default="0",
        metadata={
            "name": "outputPhaseComposition",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    pressure_control: str = field( metadata={
        "name": "pressureControl",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    steps: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    temperature_control: str = field(
        metadata={
            "name": "temperatureControl",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PackCollection:

    class Meta:
        name = "PackCollectionType"

    disable_coord_collection: str = field(
        default="0",
        metadata={
            "name": "disableCoordCollection",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    field_name: str = field( metadata={
        "name": "fieldName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    object_path: str = field( metadata={
        "name": "objectPath",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    only_on_set_change: str = field(
        default="0",
        metadata={
            "name": "onlyOnSetChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    set_names: str = field(
        default="{}",
        metadata={
            "name": "setNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ParallelPlatesPermeability:

    class Meta:
        name = "ParallelPlatesPermeabilityType"

    transversal_permeability: str = field(
        default="-1",
        metadata={
            "name": "transversalPermeability",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Parameter:

    class Meta:
        name = "ParameterType"

    value: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ParticleFluid:

    class Meta:
        name = "ParticleFluidType"

    collision_alpha: str = field(
        default="1.27",
        metadata={
            "name": "collisionAlpha",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    collision_beta: str = field(
        default="1.5",
        metadata={
            "name": "collisionBeta",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    fluid_viscosity: str = field(
        default="0.001",
        metadata={
            "name": "fluidViscosity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    hindered_settling_coefficient: str = field(
        default="5.9",
        metadata={
            "name": "hinderedSettlingCoefficient",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_collisional_slip: str = field(
        default="0",
        metadata={
            "name": "isCollisionalSlip",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_proppant_concentration: str = field(
        default="0.6",
        metadata={
            "name": "maxProppantConcentration",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    particle_settling_model: str = field(
        metadata={
            "name": "particleSettlingModel",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|Stokes|Intermediate|Turbulence",
        } )
    proppant_density: str = field(
        default="1400",
        metadata={
            "name": "proppantDensity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    proppant_diameter: str = field(
        default="0.0002",
        metadata={
            "name": "proppantDiameter",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    slip_concentration: str = field(
        default="0.1",
        metadata={
            "name": "slipConcentration",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    sphericity: str = field(
        default="1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ParticleMesh:

    class Meta:
        name = "ParticleMeshType"

    header_file: str = field( metadata={
        "name": "headerFile",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
    } )
    particle_block_names: str = field(
        metadata={
            "name": "particleBlockNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    particle_file: str = field( metadata={
        "name": "particleFile",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
    } )
    particle_types: str = field(
        metadata={
            "name": "particleTypes",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ParticleRegion:

    class Meta:
        name = "ParticleRegionType"

    material_list: str = field(
        metadata={
            "name": "materialList",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    mesh_body: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "meshBody",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    particle_blocks: str = field(
        default="{}",
        metadata={
            "name": "particleBlocks",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PerfectlyPlastic:

    class Meta:
        name = "PerfectlyPlasticType"

    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_yield_stress: str = field(
        default="1.79769e+308",
        metadata={
            "name": "defaultYieldStress",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Perforation:

    class Meta:
        name = "PerforationType"

    distance_from_head: str = field(
        metadata={
            "name": "distanceFromHead",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    skin_factor: str = field(
        default="0",
        metadata={
            "name": "skinFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    transmissibility: str = field(
        default="-1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PermeabilityBase:

    class Meta:
        name = "PermeabilityBaseType"

    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousDamageElasticIsotropic:

    class Meta:
        name = "PorousDamageElasticIsotropicType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousDamageSpectralElasticIsotropic:

    class Meta:
        name = "PorousDamageSpectralElasticIsotropicType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousDamageVolDevElasticIsotropic:

    class Meta:
        name = "PorousDamageVolDevElasticIsotropicType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousDelftEgg:

    class Meta:
        name = "PorousDelftEggType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousDruckerPrager:

    class Meta:
        name = "PorousDruckerPragerType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousElasticIsotropic:

    class Meta:
        name = "PorousElasticIsotropicType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousElasticOrthotropic:

    class Meta:
        name = "PorousElasticOrthotropicType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousElasticTransverseIsotropic:

    class Meta:
        name = "PorousElasticTransverseIsotropicType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousExtendedDruckerPrager:

    class Meta:
        name = "PorousExtendedDruckerPragerType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousModifiedCamClay:

    class Meta:
        name = "PorousModifiedCamClayType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousViscoDruckerPrager:

    class Meta:
        name = "PorousViscoDruckerPragerType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousViscoExtendedDruckerPrager:

    class Meta:
        name = "PorousViscoExtendedDruckerPragerType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PorousViscoModifiedCamClay:

    class Meta:
        name = "PorousViscoModifiedCamClayType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PressurePorosity:

    class Meta:
        name = "PressurePorosityType"

    compressibility: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_reference_porosity: str = field(
        metadata={
            "name": "defaultReferencePorosity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    reference_pressure: str = field(
        metadata={
            "name": "referencePressure",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ProppantPermeability:

    class Meta:
        name = "ProppantPermeabilityType"

    max_proppant_concentration: str = field(
        metadata={
            "name": "maxProppantConcentration",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    proppant_diameter: str = field(
        metadata={
            "name": "proppantDiameter",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ProppantPorosity:

    class Meta:
        name = "ProppantPorosityType"

    default_reference_porosity: str = field(
        metadata={
            "name": "defaultReferencePorosity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    max_proppant_concentration: str = field(
        metadata={
            "name": "maxProppantConcentration",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ProppantSlurryFluid:

    class Meta:
        name = "ProppantSlurryFluidType"

    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    compressibility: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_component_density: str = field(
        default="{0}",
        metadata={
            "name":
            "defaultComponentDensity",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    default_component_viscosity: str = field(
        default="{0}",
        metadata={
            "name":
            "defaultComponentViscosity",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    default_compressibility: str = field(
        default="{0}",
        metadata={
            "name":
            "defaultCompressibility",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    flow_behavior_index: str = field(
        default="{0}",
        metadata={
            "name":
            "flowBehaviorIndex",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    flow_consistency_index: str = field(
        default="{0}",
        metadata={
            "name":
            "flowConsistencyIndex",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    max_proppant_concentration: str = field(
        default="0.6",
        metadata={
            "name": "maxProppantConcentration",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_density: str = field(
        default="1000",
        metadata={
            "name": "referenceDensity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_pressure: str = field(
        default="100000",
        metadata={
            "name": "referencePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_proppant_density: str = field(
        default="1400",
        metadata={
            "name": "referenceProppantDensity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_viscosity: str = field(
        default="0.001",
        metadata={
            "name": "referenceViscosity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ProppantSolidProppantPermeability:

    class Meta:
        name = "ProppantSolidProppantPermeabilityType"

    permeability_model_name: str = field(
        metadata={
            "name": "permeabilityModelName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    porosity_model_name: str = field( metadata={
        "name": "porosityModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    solid_internal_energy_model_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "solidInternalEnergyModelName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    solid_model_name: str = field( metadata={
        "name": "solidModelName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Python:

    class Meta:
        name = "PythonType"

    child_directory: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "childDirectory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    parallel_threads: str = field(
        default="1",
        metadata={
            "name": "parallelThreads",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ReactiveBrineThermal:

    class Meta:
        name = "ReactiveBrineThermalType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_molar_weight: str = field(
        default="{0}",
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        default="{}",
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_pvtpara_files: str = field(
        metadata={
            "name": "phasePVTParaFiles",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ReactiveBrine:

    class Meta:
        name = "ReactiveBrineType"

    check_pvttables_ranges: str = field(
        default="1",
        metadata={
            "name": "checkPVTTablesRanges",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    component_molar_weight: str = field(
        default="{0}",
        metadata={
            "name":
            "componentMolarWeight",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        default="{}",
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_pvtpara_files: str = field(
        metadata={
            "name": "phasePVTParaFiles",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ReactiveFluidDriver:

    class Meta:
        name = "ReactiveFluidDriverType"

    baseline: str = field(
        default="none",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    feed_composition: str = field(
        metadata={
            "name":
            "feedComposition",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    fluid: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output: str = field(
        default="none",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    pressure_control: str = field( metadata={
        "name": "pressureControl",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    steps: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    temperature_control: str = field(
        metadata={
            "name": "temperatureControl",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Rectangle:

    class Meta:
        name = "RectangleType"

    dimensions: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    length_vector: str = field(
        metadata={
            "name":
            "lengthVector",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    normal: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    origin: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    tolerance: str = field(
        default="1e-05",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    width_vector: str = field(
        metadata={
            "name":
            "widthVector",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class RelpermDriver:

    class Meta:
        name = "RelpermDriverType"

    baseline: str = field(
        default="none",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output: str = field(
        default="none",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    relperm: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    steps: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Restart:

    class Meta:
        name = "RestartType"

    child_directory: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "childDirectory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    parallel_threads: str = field(
        default="1",
        metadata={
            "name": "parallelThreads",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Run:

    class Meta:
        name = "RunType"

    args: Optional[ str ] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    auto_partition: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "autoPartition",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    mesh_sizes: str = field(
        default="{0}",
        metadata={
            "name": "meshSizes",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    nodes: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    scale_list: str = field(
        default="{0}",
        metadata={
            "name": "scaleList",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        },
    )
    scaling: Optional[ str ] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    tasks_per_node: str = field( metadata={
        "name": "tasksPerNode",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    threads_per_task: str = field(
        default="0",
        metadata={
            "name": "threadsPerTask",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    time_limit: str = field(
        default="0",
        metadata={
            "name": "timeLimit",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )


@dataclass( kw_only=True )
class Silo:

    class Meta:
        name = "SiloType"

    child_directory: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "childDirectory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    field_names: str = field(
        default="{}",
        metadata={
            "name": "fieldNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    only_plot_specified_field_names: str = field(
        default="0",
        metadata={
            "name": "onlyPlotSpecifiedFieldNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    parallel_threads: str = field(
        default="1",
        metadata={
            "name": "parallelThreads",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    plot_file_root: str = field(
        default="plot",
        metadata={
            "name": "plotFileRoot",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    plot_level: str = field(
        default="1",
        metadata={
            "name": "plotLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    write_cell_element_mesh: str = field(
        default="1",
        metadata={
            "name": "writeCellElementMesh",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    write_edge_mesh: str = field(
        default="0",
        metadata={
            "name": "writeEdgeMesh",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    write_femfaces: str = field(
        default="0",
        metadata={
            "name": "writeFEMFaces",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    write_face_element_mesh: str = field(
        default="1",
        metadata={
            "name": "writeFaceElementMesh",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseConstantThermalConductivity:

    class Meta:
        name = "SinglePhaseConstantThermalConductivityType"

    thermal_conductivity_components: str = field(
        metadata={
            "name":
            "thermalConductivityComponents",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhasePoromechanicsInitialization:

    class Meta:
        name = "SinglePhasePoromechanicsInitializationType"

    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    perform_stress_initialization: str = field(
        metadata={
            "name": "performStressInitialization",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        } )
    poromechanics_solver_name: str = field(
        metadata={
            "name": "poromechanicsSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseReservoirPoromechanicsInitialization:

    class Meta:
        name = "SinglePhaseReservoirPoromechanicsInitializationType"

    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    perform_stress_initialization: str = field(
        metadata={
            "name": "performStressInitialization",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        } )
    poromechanics_solver_name: str = field(
        metadata={
            "name": "poromechanicsSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseStatistics:

    class Meta:
        name = "SinglePhaseStatisticsType"

    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    write_csv: str = field(
        default="0",
        metadata={
            "name": "writeCSV",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SlipDependentPermeability:

    class Meta:
        name = "SlipDependentPermeabilityType"

    initial_permeability: str = field(
        metadata={
            "name":
            "initialPermeability",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    max_perm_multiplier: str = field(
        metadata={
            "name": "maxPermMultiplier",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    shear_disp_threshold: str = field(
        metadata={
            "name": "shearDispThreshold",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SolidInternalEnergy:

    class Meta:
        name = "SolidInternalEnergyType"

    reference_internal_energy: str = field(
        metadata={
            "name": "referenceInternalEnergy",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    reference_temperature: str = field(
        metadata={
            "name": "referenceTemperature",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    volumetric_heat_capacity: str = field(
        metadata={
            "name": "volumetricHeatCapacity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SolidMechanicsStateReset:

    class Meta:
        name = "SolidMechanicsStateResetType"

    disable_inelasticity: str = field(
        default="0",
        metadata={
            "name": "disableInelasticity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    reset_displacements: str = field(
        default="1",
        metadata={
            "name": "resetDisplacements",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SolidMechanicsStatistics:

    class Meta:
        name = "SolidMechanicsStatisticsType"

    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    write_csv: str = field(
        default="0",
        metadata={
            "name": "writeCSV",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SourceFlux:

    class Meta:
        name = "SourceFluxType"

    bc_application_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "bcApplicationTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    begin_time: str = field(
        default="-1e+99",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    component: str = field(
        default="-1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    direction: str = field(
        default="{0,0,0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    end_time: str = field(
        default="1e+99",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    function_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "functionName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    initial_condition: str = field(
        default="0",
        metadata={
            "name": "initialCondition",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    object_path: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "objectPath",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    scale: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    set_names: str = field(
        metadata={
            "name": "setNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SurfaceElementRegion:

    class Meta:
        name = "SurfaceElementRegionType"

    default_aperture: str = field(
        metadata={
            "name": "defaultAperture",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    face_block: str = field(
        default="FractureSubRegion",
        metadata={
            "name": "faceBlock",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    material_list: str = field(
        metadata={
            "name": "materialList",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    mesh_body: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "meshBody",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    sub_region_type: str = field(
        default="faceElement",
        metadata={
            "name": "subRegionType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|faceElement|embeddedElement",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SymbolicFunction:

    class Meta:
        name = "SymbolicFunctionType"

    expression: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    input_var_names: str = field(
        default="{}",
        metadata={
            "name": "inputVarNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    variable_names: str = field(
        metadata={
            "name": "variableNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class TableCapillaryPressure:

    class Meta:
        name = "TableCapillaryPressureType"

    non_wetting_intermediate_cap_pressure_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "nonWettingIntermediateCapPressureTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    wetting_intermediate_cap_pressure_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "wettingIntermediateCapPressureTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    wetting_non_wetting_cap_pressure_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "wettingNonWettingCapPressureTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class TableFunction:

    class Meta:
        name = "TableFunctionType"

    coordinate_files: str = field(
        default="{}",
        metadata={
            "name": "coordinateFiles",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^*?<>\|:\";,\s]+\s*,\s*)*[^*?<>\|:\";,\s]+\s*)?\}\s*",
        },
    )
    coordinates: str = field(
        default="{0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    input_var_names: str = field(
        default="{}",
        metadata={
            "name": "inputVarNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    interpolation: str = field(
        default="linear",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|linear|nearest|upper|lower",
        },
    )
    values: str = field(
        default="{0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    voxel_file: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "voxelFile",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class TableRelativePermeabilityHysteresis:

    class Meta:
        name = "TableRelativePermeabilityHysteresisType"

    drainage_non_wetting_intermediate_rel_perm_table_names: str = field(
        default="{}",
        metadata={
            "name": "drainageNonWettingIntermediateRelPermTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    drainage_wetting_intermediate_rel_perm_table_names: str = field(
        default="{}",
        metadata={
            "name": "drainageWettingIntermediateRelPermTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    drainage_wetting_non_wetting_rel_perm_table_names: str = field(
        default="{}",
        metadata={
            "name": "drainageWettingNonWettingRelPermTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    imbibition_non_wetting_rel_perm_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "imbibitionNonWettingRelPermTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    imbibition_wetting_rel_perm_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "imbibitionWettingRelPermTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    jerauld_parameter_a: str = field(
        default="0.1",
        metadata={
            "name": "jerauldParameterA",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    jerauld_parameter_b: str = field(
        default="0",
        metadata={
            "name": "jerauldParameterB",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    killough_curvature_parameter: str = field(
        default="1",
        metadata={
            "name": "killoughCurvatureParameter",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    three_phase_interpolator: str = field(
        default="BAKER",
        metadata={
            "name": "threePhaseInterpolator",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|BAKER|STONEII",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class TableRelativePermeability:

    class Meta:
        name = "TableRelativePermeabilityType"

    non_wetting_intermediate_rel_perm_table_names: str = field(
        default="{}",
        metadata={
            "name": "nonWettingIntermediateRelPermTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    three_phase_interpolator: str = field(
        default="BAKER",
        metadata={
            "name": "threePhaseInterpolator",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|BAKER|STONEII",
        },
    )
    wetting_intermediate_rel_perm_table_names: str = field(
        default="{}",
        metadata={
            "name": "wettingIntermediateRelPermTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    wetting_non_wetting_rel_perm_table_names: str = field(
        default="{}",
        metadata={
            "name": "wettingNonWettingRelPermTableNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ThermalCompressibleSinglePhaseFluid:

    class Meta:
        name = "ThermalCompressibleSinglePhaseFluidType"

    compressibility: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_viscosity: str = field(
        metadata={
            "name": "defaultViscosity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    density_model_type: str = field(
        default="linear",
        metadata={
            "name": "densityModelType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|exponential|linear|quadratic",
        },
    )
    internal_energy_model_type: str = field(
        default="linear",
        metadata={
            "name": "internalEnergyModelType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|exponential|linear|quadratic",
        },
    )
    reference_density: str = field(
        default="1000",
        metadata={
            "name": "referenceDensity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_internal_energy: str = field(
        default="0.001",
        metadata={
            "name": "referenceInternalEnergy",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_pressure: str = field(
        default="0",
        metadata={
            "name": "referencePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_temperature: str = field(
        default="0",
        metadata={
            "name": "referenceTemperature",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    reference_viscosity: str = field(
        default="0.001",
        metadata={
            "name": "referenceViscosity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    specific_heat_capacity: str = field(
        default="0",
        metadata={
            "name": "specificHeatCapacity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    thermal_expansion_coeff: str = field(
        default="0",
        metadata={
            "name": "thermalExpansionCoeff",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    viscosibility: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    viscosity_model_type: str = field(
        default="linear",
        metadata={
            "name": "viscosityModelType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|exponential|linear|quadratic",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ThickPlane:

    class Meta:
        name = "ThickPlaneType"

    normal: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    origin: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        } )
    thickness: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class TimeHistory:

    class Meta:
        name = "TimeHistoryType"

    child_directory: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "childDirectory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    filename: str = field(
        default="TimeHistory",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    format: str = field(
        default="hdf",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    parallel_threads: str = field(
        default="1",
        metadata={
            "name": "parallelThreads",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    sources: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Traction:

    class Meta:
        name = "TractionType"

    bc_application_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "bcApplicationTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    begin_time: str = field(
        default="-1e+99",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    direction: str = field(
        default="{0,0,0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    end_time: str = field(
        default="1e+99",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    function_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "functionName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    initial_condition: str = field(
        default="0",
        metadata={
            "name": "initialCondition",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    input_stress: str = field(
        default="{0,0,0,0,0,0}",
        metadata={
            "name":
            "inputStress",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){5}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    object_path: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "objectPath",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    scale: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    set_names: str = field(
        metadata={
            "name": "setNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    traction_type: str = field(
        default="vector",
        metadata={
            "name": "tractionType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|vector|normal|stress",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class TriaxialDriver:

    class Meta:
        name = "TriaxialDriverType"

    axial_control: str = field( metadata={
        "name": "axialControl",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    baseline: str = field(
        default="none",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    initial_stress: str = field(
        metadata={
            "name": "initialStress",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    material: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    mode: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|mixedControl|strainControl|stressControl",
    } )
    output: str = field(
        default="none",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    radial_control: str = field( metadata={
        "name": "radialControl",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    steps: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class TwoPointFluxApproximation:

    class Meta:
        name = "TwoPointFluxApproximationType"

    area_rel_tol: str = field(
        default="1e-08",
        metadata={
            "name": "areaRelTol",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    mean_perm_coefficient: str = field(
        default="1",
        metadata={
            "name": "meanPermCoefficient",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    upwinding_scheme: str = field(
        default="PPU",
        metadata={
            "name": "upwindingScheme",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|PPU|C1PPU|IHU",
        },
    )
    use_pedfm: str = field(
        default="0",
        metadata={
            "name": "usePEDFM",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Vtk:

    class Meta:
        name = "VTKType"

    child_directory: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "childDirectory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    field_names: str = field(
        default="{}",
        metadata={
            "name": "fieldNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    format: str = field(
        default="binary",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|binary|ascii",
        },
    )
    level_names: str = field(
        default="{}",
        metadata={
            "name": "levelNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    only_plot_specified_field_names: str = field(
        default="0",
        metadata={
            "name": "onlyPlotSpecifiedFieldNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output_region_type: str = field(
        default="all",
        metadata={
            "name": "outputRegionType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|cell|well|surface|particle|all",
        },
    )
    parallel_threads: str = field(
        default="1",
        metadata={
            "name": "parallelThreads",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    plot_file_root: str = field(
        default="VTK",
        metadata={
            "name": "plotFileRoot",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    plot_level: str = field(
        default="1",
        metadata={
            "name": "plotLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    write_femfaces: str = field(
        default="0",
        metadata={
            "name": "writeFEMFaces",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    write_ghost_cells: str = field(
        default="0",
        metadata={
            "name": "writeGhostCells",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class VanGenuchtenBakerRelativePermeability:

    class Meta:
        name = "VanGenuchtenBakerRelativePermeabilityType"

    gas_oil_rel_perm_exponent_inv: str = field(
        default="{0.5}",
        metadata={
            "name":
            "gasOilRelPermExponentInv",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    gas_oil_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "gasOilRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_min_volume_fraction: str = field(
        default="{0}",
        metadata={
            "name":
            "phaseMinVolumeFraction",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    water_oil_rel_perm_exponent_inv: str = field(
        default="{0.5}",
        metadata={
            "name":
            "waterOilRelPermExponentInv",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    water_oil_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "waterOilRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class VanGenuchtenCapillaryPressure:

    class Meta:
        name = "VanGenuchtenCapillaryPressureType"

    cap_pressure_epsilon: str = field(
        default="1e-06",
        metadata={
            "name": "capPressureEpsilon",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    phase_cap_pressure_exponent_inv: str = field(
        default="{0.5}",
        metadata={
            "name":
            "phaseCapPressureExponentInv",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_cap_pressure_multiplier: str = field(
        default="{1}",
        metadata={
            "name":
            "phaseCapPressureMultiplier",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_min_volume_fraction: str = field(
        default="{0}",
        metadata={
            "name":
            "phaseMinVolumeFraction",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class VanGenuchtenStone2RelativePermeability:

    class Meta:
        name = "VanGenuchtenStone2RelativePermeabilityType"

    gas_oil_rel_perm_exponent_inv: str = field(
        default="{0.5}",
        metadata={
            "name":
            "gasOilRelPermExponentInv",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    gas_oil_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "gasOilRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_min_volume_fraction: str = field(
        default="{0}",
        metadata={
            "name":
            "phaseMinVolumeFraction",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    phase_names: str = field(
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    water_oil_rel_perm_exponent_inv: str = field(
        default="{0.5}",
        metadata={
            "name":
            "waterOilRelPermExponentInv",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    water_oil_rel_perm_max_value: str = field(
        default="{0}",
        metadata={
            "name":
            "waterOilRelPermMaxValue",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ViscoDruckerPrager:

    class Meta:
        name = "ViscoDruckerPragerType"

    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_cohesion: str = field(
        default="0",
        metadata={
            "name": "defaultCohesion",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_dilation_angle: str = field(
        default="30",
        metadata={
            "name": "defaultDilationAngle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_friction_angle: str = field(
        default="30",
        metadata={
            "name": "defaultFrictionAngle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_hardening_rate: str = field(
        default="0",
        metadata={
            "name": "defaultHardeningRate",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    relaxation_time: str = field(
        metadata={
            "name": "relaxationTime",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ViscoExtendedDruckerPrager:

    class Meta:
        name = "ViscoExtendedDruckerPragerType"

    default_bulk_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultBulkModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_cohesion: str = field(
        default="0",
        metadata={
            "name": "defaultCohesion",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_dilation_ratio: str = field(
        default="1",
        metadata={
            "name": "defaultDilationRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_hardening: str = field(
        default="0",
        metadata={
            "name": "defaultHardening",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_initial_friction_angle: str = field(
        default="30",
        metadata={
            "name": "defaultInitialFrictionAngle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_poisson_ratio: str = field(
        default="-1",
        metadata={
            "name": "defaultPoissonRatio",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_residual_friction_angle: str = field(
        default="30",
        metadata={
            "name": "defaultResidualFrictionAngle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_young_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultYoungModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    relaxation_time: str = field(
        metadata={
            "name": "relaxationTime",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ViscoModifiedCamClay:

    class Meta:
        name = "ViscoModifiedCamClayType"

    default_csl_slope: str = field(
        default="1",
        metadata={
            "name": "defaultCslSlope",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_density: str = field(
        metadata={
            "name": "defaultDensity",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    default_drained_linear_tec: str = field(
        default="0",
        metadata={
            "name": "defaultDrainedLinearTEC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_pre_consolidation_pressure: str = field(
        default="-1.5",
        metadata={
            "name": "defaultPreConsolidationPressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_recompression_index: str = field(
        default="0.002",
        metadata={
            "name": "defaultRecompressionIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_ref_pressure: str = field(
        default="-1",
        metadata={
            "name": "defaultRefPressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_ref_strain_vol: str = field(
        default="0",
        metadata={
            "name": "defaultRefStrainVol",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_shear_modulus: str = field(
        default="-1",
        metadata={
            "name": "defaultShearModulus",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    default_virgin_compression_index: str = field(
        default="0.005",
        metadata={
            "name": "defaultVirginCompressionIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    relaxation_time: str = field(
        metadata={
            "name": "relaxationTime",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class WellControls:

    class Meta:
        name = "WellControlsType"

    control: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|BHP|phaseVolRate|totalVolRate|uninitialized",
    } )
    enable_crossflow: str = field(
        default="1",
        metadata={
            "name": "enableCrossflow",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    initial_pressure_coefficient: str = field(
        default="0.1",
        metadata={
            "name": "initialPressureCoefficient",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    injection_stream: str = field(
        default="{-1}",
        metadata={
            "name":
            "injectionStream",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    injection_temperature: str = field(
        default="-1",
        metadata={
            "name": "injectionTemperature",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    reference_elevation: str = field(
        metadata={
            "name": "referenceElevation",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    status_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "statusTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    surface_pressure: str = field(
        default="0",
        metadata={
            "name": "surfacePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    surface_temperature: str = field(
        default="0",
        metadata={
            "name": "surfaceTemperature",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_bhp: str = field(
        default="0",
        metadata={
            "name": "targetBHP",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_bhptable_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "targetBHPTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    target_phase_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "targetPhaseName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    target_phase_rate: str = field(
        default="0",
        metadata={
            "name": "targetPhaseRate",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_phase_rate_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "targetPhaseRateTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    target_total_rate: str = field(
        default="0",
        metadata={
            "name": "targetTotalRate",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_total_rate_table_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "targetTotalRateTableName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    type_value: str = field( metadata={
        "name": "type",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|producer|injector",
    } )
    use_surface_conditions: str = field(
        default="0",
        metadata={
            "name": "useSurfaceConditions",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class WellElementRegion:

    class Meta:
        name = "WellElementRegionType"

    material_list: str = field(
        metadata={
            "name": "materialList",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    mesh_body: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "meshBody",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class WillisRichardsPermeability:

    class Meta:
        name = "WillisRichardsPermeabilityType"

    dilation_coefficient: str = field(
        metadata={
            "name": "dilationCoefficient",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    max_frac_aperture: str = field(
        metadata={
            "name": "maxFracAperture",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    ref_closure_stress: str = field(
        metadata={
            "name": "refClosureStress",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class AcousticElasticSem:

    class Meta:
        name = "AcousticElasticSEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    acoustic_solver_name: str = field(
        metadata={
            "name": "acousticSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    elastic_solver_name: str = field( metadata={
        "name": "elasticSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class AcousticFirstOrderSem:

    class Meta:
        name = "AcousticFirstOrderSEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    dt_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "dtSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    enable_lifo: str = field(
        default="0",
        metadata={
            "name": "enableLifo",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    forward: str = field(
        default="1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    lifo_on_device: str = field(
        default="-80",
        metadata={
            "name": "lifoOnDevice",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_on_host: str = field(
        default="-80",
        metadata={
            "name": "lifoOnHost",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_size: str = field(
        default="2147483647",
        metadata={
            "name": "lifoSize",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    linear_dasgeometry: str = field(
        default="{{0}}",
        metadata={
            "name":
            "linearDASGeometry",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    linear_dassamples: str = field(
        default="5",
        metadata={
            "name": "linearDASSamples",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "outputSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    receiver_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "receiverCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    ricker_order: str = field(
        default="2",
        metadata={
            "name": "rickerOrder",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    save_fields: str = field(
        default="0",
        metadata={
            "name": "saveFields",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    shot_index: str = field(
        default="0",
        metadata={
            "name": "shotIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    source_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "sourceCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_source_delay: str = field(
        default="-1",
        metadata={
            "name": "timeSourceDelay",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_source_frequency: str = field(
        default="0",
        metadata={
            "name": "timeSourceFrequency",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    use_das: str = field(
        default="none",
        metadata={
            "name": "useDAS",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|none|dipole|strainIntegration",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class AcousticSem:

    class Meta:
        name = "AcousticSEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    dt_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "dtSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    enable_lifo: str = field(
        default="0",
        metadata={
            "name": "enableLifo",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    forward: str = field(
        default="1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    lifo_on_device: str = field(
        default="-80",
        metadata={
            "name": "lifoOnDevice",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_on_host: str = field(
        default="-80",
        metadata={
            "name": "lifoOnHost",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_size: str = field(
        default="2147483647",
        metadata={
            "name": "lifoSize",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    linear_dasgeometry: str = field(
        default="{{0}}",
        metadata={
            "name":
            "linearDASGeometry",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    linear_dassamples: str = field(
        default="5",
        metadata={
            "name": "linearDASSamples",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "outputSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    receiver_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "receiverCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    ricker_order: str = field(
        default="2",
        metadata={
            "name": "rickerOrder",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    save_fields: str = field(
        default="0",
        metadata={
            "name": "saveFields",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    shot_index: str = field(
        default="0",
        metadata={
            "name": "shotIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    source_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "sourceCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_source_delay: str = field(
        default="-1",
        metadata={
            "name": "timeSourceDelay",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_source_frequency: str = field(
        default="0",
        metadata={
            "name": "timeSourceFrequency",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    use_das: str = field(
        default="none",
        metadata={
            "name": "useDAS",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|none|dipole|strainIntegration",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class AcousticVtisem:

    class Meta:
        name = "AcousticVTISEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    dt_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "dtSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    enable_lifo: str = field(
        default="0",
        metadata={
            "name": "enableLifo",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    forward: str = field(
        default="1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    lifo_on_device: str = field(
        default="-80",
        metadata={
            "name": "lifoOnDevice",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_on_host: str = field(
        default="-80",
        metadata={
            "name": "lifoOnHost",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_size: str = field(
        default="2147483647",
        metadata={
            "name": "lifoSize",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    linear_dasgeometry: str = field(
        default="{{0}}",
        metadata={
            "name":
            "linearDASGeometry",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    linear_dassamples: str = field(
        default="5",
        metadata={
            "name": "linearDASSamples",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "outputSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    receiver_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "receiverCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    ricker_order: str = field(
        default="2",
        metadata={
            "name": "rickerOrder",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    save_fields: str = field(
        default="0",
        metadata={
            "name": "saveFields",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    shot_index: str = field(
        default="0",
        metadata={
            "name": "shotIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    source_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "sourceCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_source_delay: str = field(
        default="-1",
        metadata={
            "name": "timeSourceDelay",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_source_frequency: str = field(
        default="0",
        metadata={
            "name": "timeSourceFrequency",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    use_das: str = field(
        default="none",
        metadata={
            "name": "useDAS",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|none|dipole|strainIntegration",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositionalMultiphaseFvm:

    class Meta:
        name = "CompositionalMultiphaseFVMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    allow_local_comp_density_chopping: str = field(
        default="1",
        metadata={
            "name": "allowLocalCompDensityChopping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    allow_negative_pressure: str = field(
        default="1",
        metadata={
            "name": "allowNegativePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    cont_multiplier_dbc: str = field(
        default="0.5",
        metadata={
            "name": "contMultiplierDBC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    continuation_dbc: str = field(
        default="1",
        metadata={
            "name": "continuationDBC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    kappamin_dbc: str = field(
        default="1e-20",
        metadata={
            "name": "kappaminDBC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_absolute_pressure_change: str = field(
        default="-1",
        metadata={
            "name": "maxAbsolutePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_comp_fraction_change: str = field(
        default="0.5",
        metadata={
            "name": "maxCompFractionChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_relative_pressure_change: str = field(
        default="0.5",
        metadata={
            "name": "maxRelativePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_relative_temperature_change: str = field(
        default="0.5",
        metadata={
            "name": "maxRelativeTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_comp_dens_change: str = field(
        default="1",
        metadata={
            "name": "maxSequentialCompDensChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_pressure_change: str = field(
        default="100000",
        metadata={
            "name": "maxSequentialPressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_temperature_change: str = field(
        default="0.1",
        metadata={
            "name": "maxSequentialTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    min_comp_dens: str = field(
        default="1e-10",
        metadata={
            "name": "minCompDens",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    miscible_dbc: str = field(
        default="0",
        metadata={
            "name": "miscibleDBC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    omega_dbc: str = field(
        default="1",
        metadata={
            "name": "omegaDBC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    scaling_type: str = field(
        default="Global",
        metadata={
            "name": "scalingType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|Global|Local",
        },
    )
    solution_change_scaling_factor: str = field(
        default="0.5",
        metadata={
            "name": "solutionChangeScalingFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_flow_cfl: str = field(
        default="-1",
        metadata={
            "name": "targetFlowCFL",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_phase_vol_fraction_change_in_time_step: str = field(
        default="0.2",
        metadata={
            "name": "targetPhaseVolFractionChangeInTimeStep",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    target_relative_pressure_change_in_time_step: str = field(
        default="0.2",
        metadata={
            "name": "targetRelativePressureChangeInTimeStep",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_relative_temperature_change_in_time_step: str = field(
        default="0.2",
        metadata={
            "name": "targetRelativeTemperatureChangeInTimeStep",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    temperature: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    use_dbc: str = field(
        default="0",
        metadata={
            "name": "useDBC",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    use_mass: str = field(
        default="0",
        metadata={
            "name": "useMass",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    use_simple_accumulation: str = field(
        default="1",
        metadata={
            "name": "useSimpleAccumulation",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    use_total_mass_equation: str = field(
        default="1",
        metadata={
            "name": "useTotalMassEquation",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositionalMultiphaseHybridFvm:

    class Meta:
        name = "CompositionalMultiphaseHybridFVMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    allow_local_comp_density_chopping: str = field(
        default="1",
        metadata={
            "name": "allowLocalCompDensityChopping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    allow_negative_pressure: str = field(
        default="1",
        metadata={
            "name": "allowNegativePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_absolute_pressure_change: str = field(
        default="-1",
        metadata={
            "name": "maxAbsolutePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_comp_fraction_change: str = field(
        default="0.5",
        metadata={
            "name": "maxCompFractionChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_relative_pressure_change: str = field(
        default="0.5",
        metadata={
            "name": "maxRelativePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_relative_temperature_change: str = field(
        default="0.5",
        metadata={
            "name": "maxRelativeTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_comp_dens_change: str = field(
        default="1",
        metadata={
            "name": "maxSequentialCompDensChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_pressure_change: str = field(
        default="100000",
        metadata={
            "name": "maxSequentialPressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_temperature_change: str = field(
        default="0.1",
        metadata={
            "name": "maxSequentialTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    min_comp_dens: str = field(
        default="1e-10",
        metadata={
            "name": "minCompDens",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    solution_change_scaling_factor: str = field(
        default="0.5",
        metadata={
            "name": "solutionChangeScalingFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_flow_cfl: str = field(
        default="-1",
        metadata={
            "name": "targetFlowCFL",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_phase_vol_fraction_change_in_time_step: str = field(
        default="0.2",
        metadata={
            "name": "targetPhaseVolFractionChangeInTimeStep",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    target_relative_pressure_change_in_time_step: str = field(
        default="0.2",
        metadata={
            "name": "targetRelativePressureChangeInTimeStep",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_relative_temperature_change_in_time_step: str = field(
        default="0.2",
        metadata={
            "name": "targetRelativeTemperatureChangeInTimeStep",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    temperature: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    use_mass: str = field(
        default="0",
        metadata={
            "name": "useMass",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    use_simple_accumulation: str = field(
        default="1",
        metadata={
            "name": "useSimpleAccumulation",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    use_total_mass_equation: str = field(
        default="1",
        metadata={
            "name": "useTotalMassEquation",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositionalMultiphaseReservoirPoromechanics:

    class Meta:
        name = "CompositionalMultiphaseReservoirPoromechanicsType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    reservoir_and_wells_solver_name: str = field(
        metadata={
            "name": "reservoirAndWellsSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    stabilization_multiplier: str = field(
        default="1",
        metadata={
            "name": "stabilizationMultiplier",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    stabilization_region_names: str = field(
        default="{}",
        metadata={
            "name": "stabilizationRegionNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    stabilization_type: str = field(
        default="None",
        metadata={
            "name": "stabilizationType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|None|Global|Local",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositionalMultiphaseReservoir:

    class Meta:
        name = "CompositionalMultiphaseReservoirType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    well_solver_name: str = field( metadata={
        "name": "wellSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class CompositionalMultiphaseWell:

    class Meta:
        name = "CompositionalMultiphaseWellType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    well_controls: List[ WellControls ] = field(
        default_factory=list,
        metadata={
            "name": "WellControls",
            "type": "Element",
            "namespace": "",
        },
    )
    allow_local_comp_density_chopping: str = field(
        default="1",
        metadata={
            "name": "allowLocalCompDensityChopping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_absolute_pressure_change: str = field(
        default="-1",
        metadata={
            "name": "maxAbsolutePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_comp_fraction_change: str = field(
        default="1",
        metadata={
            "name": "maxCompFractionChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_relative_pressure_change: str = field(
        default="1",
        metadata={
            "name": "maxRelativePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    use_mass: str = field(
        default="0",
        metadata={
            "name": "useMass",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    write_csv: str = field(
        default="0",
        metadata={
            "name": "writeCSV",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Constitutive:

    class Meta:
        name = "ConstitutiveType"

    biot_porosity: List[ BiotPorosity ] = field(
        default_factory=list,
        metadata={
            "name": "BiotPorosity",
            "type": "Element",
            "namespace": "",
        },
    )
    black_oil_fluid: List[ BlackOilFluid ] = field(
        default_factory=list,
        metadata={
            "name": "BlackOilFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    brooks_corey_baker_relative_permeability: List[ BrooksCoreyBakerRelativePermeability ] = field(
        default_factory=list,
        metadata={
            "name": "BrooksCoreyBakerRelativePermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    brooks_corey_capillary_pressure: List[ BrooksCoreyCapillaryPressure ] = field(
        default_factory=list,
        metadata={
            "name": "BrooksCoreyCapillaryPressure",
            "type": "Element",
            "namespace": "",
        },
    )
    brooks_corey_relative_permeability: List[ BrooksCoreyRelativePermeability ] = field(
        default_factory=list,
        metadata={
            "name": "BrooksCoreyRelativePermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    brooks_corey_stone2_relative_permeability: List[ BrooksCoreyStone2RelativePermeability ] = field(
        default_factory=list,
        metadata={
            "name": "BrooksCoreyStone2RelativePermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    co2_brine_ezrokhi_fluid: List[ Co2BrineEzrokhiFluid ] = field(
        default_factory=list,
        metadata={
            "name": "CO2BrineEzrokhiFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    co2_brine_ezrokhi_thermal_fluid: List[ Co2BrineEzrokhiThermalFluid ] = field(
        default_factory=list,
        metadata={
            "name": "CO2BrineEzrokhiThermalFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    co2_brine_phillips_fluid: List[ Co2BrinePhillipsFluid ] = field(
        default_factory=list,
        metadata={
            "name": "CO2BrinePhillipsFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    co2_brine_phillips_thermal_fluid: List[ Co2BrinePhillipsThermalFluid ] = field(
        default_factory=list,
        metadata={
            "name": "CO2BrinePhillipsThermalFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    carman_kozeny_permeability: List[ CarmanKozenyPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "CarmanKozenyPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    ceramic_damage: List[ CeramicDamage ] = field(
        default_factory=list,
        metadata={
            "name": "CeramicDamage",
            "type": "Element",
            "namespace": "",
        },
    )
    compositional_multiphase_fluid: List[ CompositionalMultiphaseFluid ] = field(
        default_factory=list,
        metadata={
            "name": "CompositionalMultiphaseFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    compositonal_two_phase_fluid_peng_robinson: List[ CompositonalTwoPhaseFluidPengRobinson ] = field(
        default_factory=list,
        metadata={
            "name": "CompositonalTwoPhaseFluidPengRobinson",
            "type": "Element",
            "namespace": "",
        },
    )
    compositonal_two_phase_fluid_soave_redlich_kwong: List[ CompositonalTwoPhaseFluidSoaveRedlichKwong ] = field(
        default_factory=list,
        metadata={
            "name": "CompositonalTwoPhaseFluidSoaveRedlichKwong",
            "type": "Element",
            "namespace": "",
        },
    )
    compressible_single_phase_fluid: List[ CompressibleSinglePhaseFluid ] = field(
        default_factory=list,
        metadata={
            "name": "CompressibleSinglePhaseFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    compressible_solid_carman_kozeny_permeability: List[ CompressibleSolidCarmanKozenyPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "CompressibleSolidCarmanKozenyPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    compressible_solid_constant_permeability: List[ CompressibleSolidConstantPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "CompressibleSolidConstantPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    compressible_solid_exponential_decay_permeability: List[ CompressibleSolidExponentialDecayPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "CompressibleSolidExponentialDecayPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    compressible_solid_parallel_plates_permeability: List[ CompressibleSolidParallelPlatesPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "CompressibleSolidParallelPlatesPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    compressible_solid_slip_dependent_permeability: List[ CompressibleSolidSlipDependentPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "CompressibleSolidSlipDependentPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    compressible_solid_willis_richards_permeability: List[ CompressibleSolidWillisRichardsPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "CompressibleSolidWillisRichardsPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    constant_diffusion: List[ ConstantDiffusion ] = field(
        default_factory=list,
        metadata={
            "name": "ConstantDiffusion",
            "type": "Element",
            "namespace": "",
        },
    )
    constant_permeability: List[ ConstantPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "ConstantPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    coulomb: List[ Coulomb ] = field(
        default_factory=list,
        metadata={
            "name": "Coulomb",
            "type": "Element",
            "namespace": "",
        },
    )
    damage_elastic_isotropic: List[ DamageElasticIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "DamageElasticIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    damage_spectral_elastic_isotropic: List[ DamageSpectralElasticIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "DamageSpectralElasticIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    damage_vol_dev_elastic_isotropic: List[ DamageVolDevElasticIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "DamageVolDevElasticIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    dead_oil_fluid: List[ DeadOilFluid ] = field(
        default_factory=list,
        metadata={
            "name": "DeadOilFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    delft_egg: List[ DelftEgg ] = field(
        default_factory=list,
        metadata={
            "name": "DelftEgg",
            "type": "Element",
            "namespace": "",
        },
    )
    drucker_prager: List[ DruckerPrager ] = field(
        default_factory=list,
        metadata={
            "name": "DruckerPrager",
            "type": "Element",
            "namespace": "",
        },
    )
    elastic_isotropic: List[ ElasticIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "ElasticIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    elastic_isotropic_pressure_dependent: List[ ElasticIsotropicPressureDependent ] = ( field(
        default_factory=list,
        metadata={
            "name": "ElasticIsotropicPressureDependent",
            "type": "Element",
            "namespace": "",
        },
    ) )
    elastic_orthotropic: List[ ElasticOrthotropic ] = field(
        default_factory=list,
        metadata={
            "name": "ElasticOrthotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    elastic_transverse_isotropic: List[ ElasticTransverseIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "ElasticTransverseIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    exponential_decay_permeability: List[ ExponentialDecayPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "ExponentialDecayPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    extended_drucker_prager: List[ ExtendedDruckerPrager ] = field(
        default_factory=list,
        metadata={
            "name": "ExtendedDruckerPrager",
            "type": "Element",
            "namespace": "",
        },
    )
    frictionless_contact: List[ FrictionlessContact ] = field(
        default_factory=list,
        metadata={
            "name": "FrictionlessContact",
            "type": "Element",
            "namespace": "",
        },
    )
    jfunction_capillary_pressure: List[ JfunctionCapillaryPressure ] = field(
        default_factory=list,
        metadata={
            "name": "JFunctionCapillaryPressure",
            "type": "Element",
            "namespace": "",
        },
    )
    linear_isotropic_dispersion: List[ LinearIsotropicDispersion ] = field(
        default_factory=list,
        metadata={
            "name": "LinearIsotropicDispersion",
            "type": "Element",
            "namespace": "",
        },
    )
    modified_cam_clay: List[ ModifiedCamClay ] = field(
        default_factory=list,
        metadata={
            "name": "ModifiedCamClay",
            "type": "Element",
            "namespace": "",
        },
    )
    multi_phase_constant_thermal_conductivity: List[ MultiPhaseConstantThermalConductivity ] = field(
        default_factory=list,
        metadata={
            "name": "MultiPhaseConstantThermalConductivity",
            "type": "Element",
            "namespace": "",
        },
    )
    multi_phase_volume_weighted_thermal_conductivity: List[ MultiPhaseVolumeWeightedThermalConductivity ] = field(
        default_factory=list,
        metadata={
            "name": "MultiPhaseVolumeWeightedThermalConductivity",
            "type": "Element",
            "namespace": "",
        },
    )
    null_model: List[ NullModel ] = field(
        default_factory=list,
        metadata={
            "name": "NullModel",
            "type": "Element",
            "namespace": "",
        },
    )
    parallel_plates_permeability: List[ ParallelPlatesPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "ParallelPlatesPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    particle_fluid: List[ ParticleFluid ] = field(
        default_factory=list,
        metadata={
            "name": "ParticleFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    perfectly_plastic: List[ PerfectlyPlastic ] = field(
        default_factory=list,
        metadata={
            "name": "PerfectlyPlastic",
            "type": "Element",
            "namespace": "",
        },
    )
    permeability_base: List[ PermeabilityBase ] = field(
        default_factory=list,
        metadata={
            "name": "PermeabilityBase",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_damage_elastic_isotropic: List[ PorousDamageElasticIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "PorousDamageElasticIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_damage_spectral_elastic_isotropic: List[ PorousDamageSpectralElasticIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "PorousDamageSpectralElasticIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_damage_vol_dev_elastic_isotropic: List[ PorousDamageVolDevElasticIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "PorousDamageVolDevElasticIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_delft_egg: List[ PorousDelftEgg ] = field(
        default_factory=list,
        metadata={
            "name": "PorousDelftEgg",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_drucker_prager: List[ PorousDruckerPrager ] = field(
        default_factory=list,
        metadata={
            "name": "PorousDruckerPrager",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_elastic_isotropic: List[ PorousElasticIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "PorousElasticIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_elastic_orthotropic: List[ PorousElasticOrthotropic ] = field(
        default_factory=list,
        metadata={
            "name": "PorousElasticOrthotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_elastic_transverse_isotropic: List[ PorousElasticTransverseIsotropic ] = field(
        default_factory=list,
        metadata={
            "name": "PorousElasticTransverseIsotropic",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_extended_drucker_prager: List[ PorousExtendedDruckerPrager ] = field(
        default_factory=list,
        metadata={
            "name": "PorousExtendedDruckerPrager",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_modified_cam_clay: List[ PorousModifiedCamClay ] = field(
        default_factory=list,
        metadata={
            "name": "PorousModifiedCamClay",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_visco_drucker_prager: List[ PorousViscoDruckerPrager ] = field(
        default_factory=list,
        metadata={
            "name": "PorousViscoDruckerPrager",
            "type": "Element",
            "namespace": "",
        },
    )
    porous_visco_extended_drucker_prager: List[ PorousViscoExtendedDruckerPrager ] = ( field(
        default_factory=list,
        metadata={
            "name": "PorousViscoExtendedDruckerPrager",
            "type": "Element",
            "namespace": "",
        },
    ) )
    porous_visco_modified_cam_clay: List[ PorousViscoModifiedCamClay ] = field(
        default_factory=list,
        metadata={
            "name": "PorousViscoModifiedCamClay",
            "type": "Element",
            "namespace": "",
        },
    )
    pressure_porosity: List[ PressurePorosity ] = field(
        default_factory=list,
        metadata={
            "name": "PressurePorosity",
            "type": "Element",
            "namespace": "",
        },
    )
    proppant_permeability: List[ ProppantPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "ProppantPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    proppant_porosity: List[ ProppantPorosity ] = field(
        default_factory=list,
        metadata={
            "name": "ProppantPorosity",
            "type": "Element",
            "namespace": "",
        },
    )
    proppant_slurry_fluid: List[ ProppantSlurryFluid ] = field(
        default_factory=list,
        metadata={
            "name": "ProppantSlurryFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    proppant_solid_proppant_permeability: List[ ProppantSolidProppantPermeability ] = ( field(
        default_factory=list,
        metadata={
            "name": "ProppantSolidProppantPermeability",
            "type": "Element",
            "namespace": "",
        },
    ) )
    reactive_brine: List[ ReactiveBrine ] = field(
        default_factory=list,
        metadata={
            "name": "ReactiveBrine",
            "type": "Element",
            "namespace": "",
        },
    )
    reactive_brine_thermal: List[ ReactiveBrineThermal ] = field(
        default_factory=list,
        metadata={
            "name": "ReactiveBrineThermal",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_constant_thermal_conductivity: List[ SinglePhaseConstantThermalConductivity ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhaseConstantThermalConductivity",
            "type": "Element",
            "namespace": "",
        },
    )
    slip_dependent_permeability: List[ SlipDependentPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "SlipDependentPermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    solid_internal_energy: List[ SolidInternalEnergy ] = field(
        default_factory=list,
        metadata={
            "name": "SolidInternalEnergy",
            "type": "Element",
            "namespace": "",
        },
    )
    table_capillary_pressure: List[ TableCapillaryPressure ] = field(
        default_factory=list,
        metadata={
            "name": "TableCapillaryPressure",
            "type": "Element",
            "namespace": "",
        },
    )
    table_relative_permeability: List[ TableRelativePermeability ] = field(
        default_factory=list,
        metadata={
            "name": "TableRelativePermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    table_relative_permeability_hysteresis: List[ TableRelativePermeabilityHysteresis ] = field(
        default_factory=list,
        metadata={
            "name": "TableRelativePermeabilityHysteresis",
            "type": "Element",
            "namespace": "",
        },
    )
    thermal_compressible_single_phase_fluid: List[ ThermalCompressibleSinglePhaseFluid ] = field(
        default_factory=list,
        metadata={
            "name": "ThermalCompressibleSinglePhaseFluid",
            "type": "Element",
            "namespace": "",
        },
    )
    van_genuchten_baker_relative_permeability: List[ VanGenuchtenBakerRelativePermeability ] = field(
        default_factory=list,
        metadata={
            "name": "VanGenuchtenBakerRelativePermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    van_genuchten_capillary_pressure: List[ VanGenuchtenCapillaryPressure ] = field(
        default_factory=list,
        metadata={
            "name": "VanGenuchtenCapillaryPressure",
            "type": "Element",
            "namespace": "",
        },
    )
    van_genuchten_stone2_relative_permeability: List[ VanGenuchtenStone2RelativePermeability ] = field(
        default_factory=list,
        metadata={
            "name": "VanGenuchtenStone2RelativePermeability",
            "type": "Element",
            "namespace": "",
        },
    )
    visco_drucker_prager: List[ ViscoDruckerPrager ] = field(
        default_factory=list,
        metadata={
            "name": "ViscoDruckerPrager",
            "type": "Element",
            "namespace": "",
        },
    )
    visco_extended_drucker_prager: List[ ViscoExtendedDruckerPrager ] = field(
        default_factory=list,
        metadata={
            "name": "ViscoExtendedDruckerPrager",
            "type": "Element",
            "namespace": "",
        },
    )
    visco_modified_cam_clay: List[ ViscoModifiedCamClay ] = field(
        default_factory=list,
        metadata={
            "name": "ViscoModifiedCamClay",
            "type": "Element",
            "namespace": "",
        },
    )
    willis_richards_permeability: List[ WillisRichardsPermeability ] = field(
        default_factory=list,
        metadata={
            "name": "WillisRichardsPermeability",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class ElasticFirstOrderSem:

    class Meta:
        name = "ElasticFirstOrderSEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    dt_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "dtSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    enable_lifo: str = field(
        default="0",
        metadata={
            "name": "enableLifo",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    forward: str = field(
        default="1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    lifo_on_device: str = field(
        default="-80",
        metadata={
            "name": "lifoOnDevice",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_on_host: str = field(
        default="-80",
        metadata={
            "name": "lifoOnHost",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_size: str = field(
        default="2147483647",
        metadata={
            "name": "lifoSize",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    linear_dasgeometry: str = field(
        default="{{0}}",
        metadata={
            "name":
            "linearDASGeometry",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    linear_dassamples: str = field(
        default="5",
        metadata={
            "name": "linearDASSamples",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "outputSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    receiver_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "receiverCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    ricker_order: str = field(
        default="2",
        metadata={
            "name": "rickerOrder",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    save_fields: str = field(
        default="0",
        metadata={
            "name": "saveFields",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    shot_index: str = field(
        default="0",
        metadata={
            "name": "shotIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    source_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "sourceCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_source_delay: str = field(
        default="-1",
        metadata={
            "name": "timeSourceDelay",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_source_frequency: str = field(
        default="0",
        metadata={
            "name": "timeSourceFrequency",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    use_das: str = field(
        default="none",
        metadata={
            "name": "useDAS",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|none|dipole|strainIntegration",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ElasticSem:

    class Meta:
        name = "ElasticSEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    dt_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "dtSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    enable_lifo: str = field(
        default="0",
        metadata={
            "name": "enableLifo",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    forward: str = field(
        default="1",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    lifo_on_device: str = field(
        default="-80",
        metadata={
            "name": "lifoOnDevice",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_on_host: str = field(
        default="-80",
        metadata={
            "name": "lifoOnHost",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    lifo_size: str = field(
        default="2147483647",
        metadata={
            "name": "lifoSize",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    linear_dasgeometry: str = field(
        default="{{0}}",
        metadata={
            "name":
            "linearDASGeometry",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    linear_dassamples: str = field(
        default="5",
        metadata={
            "name": "linearDASSamples",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    output_seismo_trace: str = field(
        default="0",
        metadata={
            "name": "outputSeismoTrace",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    receiver_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "receiverCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    ricker_order: str = field(
        default="2",
        metadata={
            "name": "rickerOrder",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    save_fields: str = field(
        default="0",
        metadata={
            "name": "saveFields",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    shot_index: str = field(
        default="0",
        metadata={
            "name": "shotIndex",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    source_coordinates: str = field(
        default="{{0}}",
        metadata={
            "name":
            "sourceCoordinates",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    source_force: str = field(
        default="{0,0,0}",
        metadata={
            "name":
            "sourceForce",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    source_moment: str = field(
        default="{1,1,1,0,0,0}",
        metadata={
            "name":
            "sourceMoment",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){5}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_source_delay: str = field(
        default="-1",
        metadata={
            "name": "timeSourceDelay",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_source_frequency: str = field(
        default="0",
        metadata={
            "name": "timeSourceFrequency",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    use_das: str = field(
        default="none",
        metadata={
            "name": "useDAS",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|none|dipole|strainIntegration",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ElementRegions:

    class Meta:
        name = "ElementRegionsType"

    cell_element_region: List[ CellElementRegion ] = field(
        default_factory=list,
        metadata={
            "name": "CellElementRegion",
            "type": "Element",
            "namespace": "",
        },
    )
    surface_element_region: List[ SurfaceElementRegion ] = field(
        default_factory=list,
        metadata={
            "name": "SurfaceElementRegion",
            "type": "Element",
            "namespace": "",
        },
    )
    well_element_region: List[ WellElementRegion ] = field(
        default_factory=list,
        metadata={
            "name": "WellElementRegion",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class EmbeddedSurfaceGenerator:

    class Meta:
        name = "EmbeddedSurfaceGeneratorType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    fracture_region: str = field(
        default="FractureRegion",
        metadata={
            "name": "fractureRegion",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    mpi_comm_order: str = field(
        default="0",
        metadata={
            "name": "mpiCommOrder",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_objects: str = field(
        metadata={
            "name": "targetObjects",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class FieldSpecifications:

    class Meta:
        name = "FieldSpecificationsType"

    aquifer: List[ Aquifer ] = field(
        default_factory=list,
        metadata={
            "name": "Aquifer",
            "type": "Element",
            "namespace": "",
        },
    )
    dirichlet: List[ Dirichlet ] = field(
        default_factory=list,
        metadata={
            "name": "Dirichlet",
            "type": "Element",
            "namespace": "",
        },
    )
    field_specification: List[ FieldSpecification ] = field(
        default_factory=list,
        metadata={
            "name": "FieldSpecification",
            "type": "Element",
            "namespace": "",
        },
    )
    hydrostatic_equilibrium: List[ HydrostaticEquilibrium ] = field(
        default_factory=list,
        metadata={
            "name": "HydrostaticEquilibrium",
            "type": "Element",
            "namespace": "",
        },
    )
    pml: List[ Pml ] = field(
        default_factory=list,
        metadata={
            "name": "PML",
            "type": "Element",
            "namespace": "",
        },
    )
    source_flux: List[ SourceFlux ] = field(
        default_factory=list,
        metadata={
            "name": "SourceFlux",
            "type": "Element",
            "namespace": "",
        },
    )
    traction: List[ Traction ] = field(
        default_factory=list,
        metadata={
            "name": "Traction",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class FiniteElements:

    class Meta:
        name = "FiniteElementsType"

    finite_element_space: List[ FiniteElementSpace ] = field(
        default_factory=list,
        metadata={
            "name": "FiniteElementSpace",
            "type": "Element",
            "namespace": "",
        },
    )
    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class FiniteVolume:

    class Meta:
        name = "FiniteVolumeType"

    hybrid_mimetic_discretization: List[ HybridMimeticDiscretization ] = field(
        default_factory=list,
        metadata={
            "name": "HybridMimeticDiscretization",
            "type": "Element",
            "namespace": "",
        },
    )
    two_point_flux_approximation: List[ TwoPointFluxApproximation ] = field(
        default_factory=list,
        metadata={
            "name": "TwoPointFluxApproximation",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class FlowProppantTransport:

    class Meta:
        name = "FlowProppantTransportType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    proppant_solver_name: str = field(
        metadata={
            "name": "proppantSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Functions:

    class Meta:
        name = "FunctionsType"

    composite_function: List[ CompositeFunction ] = field(
        default_factory=list,
        metadata={
            "name": "CompositeFunction",
            "type": "Element",
            "namespace": "",
        },
    )
    multivariable_table_function: List[ MultivariableTableFunction ] = field(
        default_factory=list,
        metadata={
            "name": "MultivariableTableFunction",
            "type": "Element",
            "namespace": "",
        },
    )
    symbolic_function: List[ SymbolicFunction ] = field(
        default_factory=list,
        metadata={
            "name": "SymbolicFunction",
            "type": "Element",
            "namespace": "",
        },
    )
    table_function: List[ TableFunction ] = field(
        default_factory=list,
        metadata={
            "name": "TableFunction",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class Geometry:

    class Meta:
        name = "GeometryType"

    box: List[ Box ] = field(
        default_factory=list,
        metadata={
            "name": "Box",
            "type": "Element",
            "namespace": "",
        },
    )
    custom_polar_object: List[ CustomPolarObject ] = field(
        default_factory=list,
        metadata={
            "name": "CustomPolarObject",
            "type": "Element",
            "namespace": "",
        },
    )
    cylinder: List[ Cylinder ] = field(
        default_factory=list,
        metadata={
            "name": "Cylinder",
            "type": "Element",
            "namespace": "",
        },
    )
    disc: List[ Disc ] = field(
        default_factory=list,
        metadata={
            "name": "Disc",
            "type": "Element",
            "namespace": "",
        },
    )
    rectangle: List[ Rectangle ] = field(
        default_factory=list,
        metadata={
            "name": "Rectangle",
            "type": "Element",
            "namespace": "",
        },
    )
    thick_plane: List[ ThickPlane ] = field(
        default_factory=list,
        metadata={
            "name": "ThickPlane",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class Hydrofracture:

    class Meta:
        name = "HydrofractureType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    contact_relation_name: str = field(
        metadata={
            "name": "contactRelationName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_matrix_poroelastic: str = field(
        default="0",
        metadata={
            "name": "isMatrixPoroelastic",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_num_resolves: str = field(
        default="10",
        metadata={
            "name": "maxNumResolves",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    surface_generator_name: str = field(
        metadata={
            "name": "surfaceGeneratorName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    use_quasi_newton: str = field(
        default="0",
        metadata={
            "name": "useQuasiNewton",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Included:

    class Meta:
        name = "IncludedType"

    file: List[ File ] = field(
        default_factory=list,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class InternalWell:

    class Meta:
        name = "InternalWellType"

    perforation: List[ Perforation ] = field(
        default_factory=list,
        metadata={
            "name": "Perforation",
            "type": "Element",
            "namespace": "",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    min_element_length: str = field(
        default="0.001",
        metadata={
            "name": "minElementLength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    min_segment_length: str = field(
        default="0.01",
        metadata={
            "name": "minSegmentLength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    num_elements_per_segment: str = field( metadata={
        "name": "numElementsPerSegment",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    polyline_node_coords: str = field(
        metadata={
            "name":
            "polylineNodeCoords",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        } )
    polyline_segment_conn: str = field(
        metadata={
            "name":
            "polylineSegmentConn",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*\}\s*",
        } )
    radius: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    well_controls_name: str = field( metadata={
        "name": "wellControlsName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    well_region_name: str = field( metadata={
        "name": "wellRegionName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class LaplaceFem:

    class Meta:
        name = "LaplaceFEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    field_name: str = field( metadata={
        "name": "fieldName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_integration_option: str = field(
        metadata={
            "name": "timeIntegrationOption",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|SteadyState|ImplicitTransient",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class MultiphasePoromechanicsReservoir:

    class Meta:
        name = "MultiphasePoromechanicsReservoirType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    poromechanics_solver_name: str = field(
        metadata={
            "name": "poromechanicsSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    well_solver_name: str = field( metadata={
        "name": "wellSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class MultiphasePoromechanics:

    class Meta:
        name = "MultiphasePoromechanicsType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    stabilization_multiplier: str = field(
        default="1",
        metadata={
            "name": "stabilizationMultiplier",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    stabilization_region_names: str = field(
        default="{}",
        metadata={
            "name": "stabilizationRegionNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    stabilization_type: str = field(
        default="None",
        metadata={
            "name": "stabilizationType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|None|Global|Local",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Outputs:

    class Meta:
        name = "OutputsType"

    blueprint: List[ Blueprint ] = field(
        default_factory=list,
        metadata={
            "name": "Blueprint",
            "type": "Element",
            "namespace": "",
        },
    )
    chombo_io: List[ ChomboIo ] = field(
        default_factory=list,
        metadata={
            "name": "ChomboIO",
            "type": "Element",
            "namespace": "",
        },
    )
    python: List[ Python ] = field(
        default_factory=list,
        metadata={
            "name": "Python",
            "type": "Element",
            "namespace": "",
        },
    )
    restart: List[ Restart ] = field(
        default_factory=list,
        metadata={
            "name": "Restart",
            "type": "Element",
            "namespace": "",
        },
    )
    silo: List[ Silo ] = field(
        default_factory=list,
        metadata={
            "name": "Silo",
            "type": "Element",
            "namespace": "",
        },
    )
    time_history: List[ TimeHistory ] = field(
        default_factory=list,
        metadata={
            "name": "TimeHistory",
            "type": "Element",
            "namespace": "",
        },
    )
    vtk: List[ Vtk ] = field(
        default_factory=list,
        metadata={
            "name": "VTK",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class Parameters:

    class Meta:
        name = "ParametersType"

    parameter: List[ Parameter ] = field(
        default_factory=list,
        metadata={
            "name": "Parameter",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class ParticleRegions:

    class Meta:
        name = "ParticleRegionsType"

    particle_region: List[ ParticleRegion ] = field(
        default_factory=list,
        metadata={
            "name": "ParticleRegion",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class PeriodicEvent:

    class Meta:
        name = "PeriodicEventType"

    halt_event: List[ HaltEvent ] = field(
        default_factory=list,
        metadata={
            "name": "HaltEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    periodic_event: List[ PeriodicEvent ] = field(
        default_factory=list,
        metadata={
            "name": "PeriodicEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    solo_event: List[ SoloEvent ] = field(
        default_factory=list,
        metadata={
            "name": "SoloEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    begin_time: str = field(
        default="0",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    cycle_frequency: str = field(
        default="1",
        metadata={
            "name": "cycleFrequency",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    end_time: str = field(
        default="1e+100",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    final_dt_stretch: str = field(
        default="0.001",
        metadata={
            "name": "finalDtStretch",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    force_dt: str = field(
        default="-1",
        metadata={
            "name": "forceDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    function: Optional[ str ] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_event_dt: str = field(
        default="-1",
        metadata={
            "name": "maxEventDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    object_value: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "object",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    set: Optional[ str ] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    stat: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target: Optional[ str ] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    target_exact_start_stop: str = field(
        default="1",
        metadata={
            "name": "targetExactStartStop",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_exact_timestep: str = field(
        default="1",
        metadata={
            "name": "targetExactTimestep",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    threshold: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_frequency: str = field(
        default="-1",
        metadata={
            "name": "timeFrequency",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PhaseFieldDamageFem:

    class Meta:
        name = "PhaseFieldDamageFEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    damage_upper_bound: str = field(
        default="1.5",
        metadata={
            "name": "damageUpperBound",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    field_name: str = field( metadata={
        "name": "fieldName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    irreversibility_flag: str = field(
        default="0",
        metadata={
            "name": "irreversibilityFlag",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    local_dissipation: str = field( metadata={
        "name": "localDissipation",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|Linear|Quadratic",
    } )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_integration_option: str = field(
        metadata={
            "name": "timeIntegrationOption",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|SteadyState|ImplicitTransient|ExplicitTransient",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class PhaseFieldFracture:

    class Meta:
        name = "PhaseFieldFractureType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    damage_solver_name: str = field( metadata={
        "name": "damageSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ProppantTransport:

    class Meta:
        name = "ProppantTransportType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    allow_negative_pressure: str = field(
        default="1",
        metadata={
            "name": "allowNegativePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    bridging_factor: str = field(
        default="0",
        metadata={
            "name": "bridgingFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    critical_shields_number: str = field(
        default="0",
        metadata={
            "name": "criticalShieldsNumber",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    friction_coefficient: str = field(
        default="0.03",
        metadata={
            "name": "frictionCoefficient",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_absolute_pressure_change: str = field(
        default="-1",
        metadata={
            "name": "maxAbsolutePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_proppant_concentration: str = field(
        default="0.6",
        metadata={
            "name": "maxProppantConcentration",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_pressure_change: str = field(
        default="100000",
        metadata={
            "name": "maxSequentialPressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_temperature_change: str = field(
        default="0.1",
        metadata={
            "name": "maxSequentialTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    proppant_density: str = field(
        default="2500",
        metadata={
            "name": "proppantDensity",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    proppant_diameter: str = field(
        default="0.0004",
        metadata={
            "name": "proppantDiameter",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    update_proppant_packing: str = field(
        default="0",
        metadata={
            "name": "updateProppantPacking",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class ReactiveCompositionalMultiphaseObl:

    class Meta:
        name = "ReactiveCompositionalMultiphaseOBLType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    obloperators_table_file: str = field(
        metadata={
            "name": "OBLOperatorsTableFile",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        } )
    allow_local_oblchopping: str = field(
        default="1",
        metadata={
            "name": "allowLocalOBLChopping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    allow_negative_pressure: str = field(
        default="1",
        metadata={
            "name": "allowNegativePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    component_names: str = field(
        default="{}",
        metadata={
            "name": "componentNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    enable_energy_balance: str = field( metadata={
        "name": "enableEnergyBalance",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_absolute_pressure_change: str = field(
        default="-1",
        metadata={
            "name": "maxAbsolutePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_comp_fraction_change: str = field(
        default="1",
        metadata={
            "name": "maxCompFractionChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_pressure_change: str = field(
        default="100000",
        metadata={
            "name": "maxSequentialPressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_temperature_change: str = field(
        default="0.1",
        metadata={
            "name": "maxSequentialTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    num_components: str = field( metadata={
        "name": "numComponents",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    num_phases: str = field( metadata={
        "name": "numPhases",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    phase_names: str = field(
        default="{}",
        metadata={
            "name": "phaseNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    trans_mult_exp: str = field(
        default="1",
        metadata={
            "name": "transMultExp",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    use_dartsl2_norm: str = field(
        default="1",
        metadata={
            "name": "useDARTSL2Norm",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseFvm:

    class Meta:
        name = "SinglePhaseFVMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    allow_negative_pressure: str = field(
        default="1",
        metadata={
            "name": "allowNegativePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_absolute_pressure_change: str = field(
        default="-1",
        metadata={
            "name": "maxAbsolutePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_pressure_change: str = field(
        default="100000",
        metadata={
            "name": "maxSequentialPressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_temperature_change: str = field(
        default="0.1",
        metadata={
            "name": "maxSequentialTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    temperature: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseHybridFvm:

    class Meta:
        name = "SinglePhaseHybridFVMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    allow_negative_pressure: str = field(
        default="1",
        metadata={
            "name": "allowNegativePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_absolute_pressure_change: str = field(
        default="-1",
        metadata={
            "name": "maxAbsolutePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_pressure_change: str = field(
        default="100000",
        metadata={
            "name": "maxSequentialPressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_temperature_change: str = field(
        default="0.1",
        metadata={
            "name": "maxSequentialTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    temperature: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhasePoromechanicsConformingFractures:

    class Meta:
        name = "SinglePhasePoromechanicsConformingFracturesType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhasePoromechanicsEmbeddedFractures:

    class Meta:
        name = "SinglePhasePoromechanicsEmbeddedFracturesType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhasePoromechanicsReservoir:

    class Meta:
        name = "SinglePhasePoromechanicsReservoirType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    poromechanics_solver_name: str = field(
        metadata={
            "name": "poromechanicsSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    well_solver_name: str = field( metadata={
        "name": "wellSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhasePoromechanics:

    class Meta:
        name = "SinglePhasePoromechanicsType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseProppantFvm:

    class Meta:
        name = "SinglePhaseProppantFVMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    allow_negative_pressure: str = field(
        default="1",
        metadata={
            "name": "allowNegativePressure",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_absolute_pressure_change: str = field(
        default="-1",
        metadata={
            "name": "maxAbsolutePressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_pressure_change: str = field(
        default="100000",
        metadata={
            "name": "maxSequentialPressureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_sequential_temperature_change: str = field(
        default="0.1",
        metadata={
            "name": "maxSequentialTemperatureChange",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    temperature: str = field(
        default="0",
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseReservoirPoromechanics:

    class Meta:
        name = "SinglePhaseReservoirPoromechanicsType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_thermal: str = field(
        default="0",
        metadata={
            "name": "isThermal",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    reservoir_and_wells_solver_name: str = field(
        metadata={
            "name": "reservoirAndWellsSolverName",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        } )
    solid_solver_name: str = field( metadata={
        "name": "solidSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseReservoir:

    class Meta:
        name = "SinglePhaseReservoirType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    flow_solver_name: str = field( metadata={
        "name": "flowSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    well_solver_name: str = field( metadata={
        "name": "wellSolverName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SinglePhaseWell:

    class Meta:
        name = "SinglePhaseWellType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    well_controls: List[ WellControls ] = field(
        default_factory=list,
        metadata={
            "name": "WellControls",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    write_csv: str = field(
        default="0",
        metadata={
            "name": "writeCSV",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SolidMechanicsEmbeddedFractures:

    class Meta:
        name = "SolidMechanicsEmbeddedFracturesType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    mass_damping: str = field(
        default="0",
        metadata={
            "name": "massDamping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_num_resolves: str = field(
        default="10",
        metadata={
            "name": "maxNumResolves",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    newmark_beta: str = field(
        default="0.25",
        metadata={
            "name": "newmarkBeta",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    newmark_gamma: str = field(
        default="0.5",
        metadata={
            "name": "newmarkGamma",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    stiffness_damping: str = field(
        default="0",
        metadata={
            "name": "stiffnessDamping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    strain_theory: str = field(
        default="0",
        metadata={
            "name": "strainTheory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_integration_option: str = field(
        default="ExplicitDynamic",
        metadata={
            "name": "timeIntegrationOption",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
        },
    )
    use_static_condensation: str = field(
        default="0",
        metadata={
            "name": "useStaticCondensation",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SolidMechanicsLagrangeContact:

    class Meta:
        name = "SolidMechanicsLagrangeContactType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    mass_damping: str = field(
        default="0",
        metadata={
            "name": "massDamping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_num_resolves: str = field(
        default="10",
        metadata={
            "name": "maxNumResolves",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    newmark_beta: str = field(
        default="0.25",
        metadata={
            "name": "newmarkBeta",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    newmark_gamma: str = field(
        default="0.5",
        metadata={
            "name": "newmarkGamma",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    stabilization_name: str = field( metadata={
        "name": "stabilizationName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    stiffness_damping: str = field(
        default="0",
        metadata={
            "name": "stiffnessDamping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    strain_theory: str = field(
        default="0",
        metadata={
            "name": "strainTheory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_integration_option: str = field(
        default="ExplicitDynamic",
        metadata={
            "name": "timeIntegrationOption",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SolidMechanicsLagrangianSsle:

    class Meta:
        name = "SolidMechanicsLagrangianSSLEType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    contact_relation_name: str = field(
        default="NOCONTACT",
        metadata={
            "name": "contactRelationName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    mass_damping: str = field(
        default="0",
        metadata={
            "name": "massDamping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_num_resolves: str = field(
        default="10",
        metadata={
            "name": "maxNumResolves",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    newmark_beta: str = field(
        default="0.25",
        metadata={
            "name": "newmarkBeta",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    newmark_gamma: str = field(
        default="0.5",
        metadata={
            "name": "newmarkGamma",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    stiffness_damping: str = field(
        default="0",
        metadata={
            "name": "stiffnessDamping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    strain_theory: str = field(
        default="0",
        metadata={
            "name": "strainTheory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    surface_generator_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "surfaceGeneratorName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_integration_option: str = field(
        default="ExplicitDynamic",
        metadata={
            "name": "timeIntegrationOption",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SolidMechanicsLagrangianFem:

    class Meta:
        name = "SolidMechanics_LagrangianFEMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    contact_relation_name: str = field(
        default="NOCONTACT",
        metadata={
            "name": "contactRelationName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    mass_damping: str = field(
        default="0",
        metadata={
            "name": "massDamping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    max_num_resolves: str = field(
        default="10",
        metadata={
            "name": "maxNumResolves",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    newmark_beta: str = field(
        default="0.25",
        metadata={
            "name": "newmarkBeta",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    newmark_gamma: str = field(
        default="0.5",
        metadata={
            "name": "newmarkGamma",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    stiffness_damping: str = field(
        default="0",
        metadata={
            "name": "stiffnessDamping",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    strain_theory: str = field(
        default="0",
        metadata={
            "name": "strainTheory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    surface_generator_name: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "surfaceGeneratorName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_integration_option: str = field(
        default="ExplicitDynamic",
        metadata={
            "name": "timeIntegrationOption",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SolidMechanicsMpm:

    class Meta:
        name = "SolidMechanics_MPMType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    boundary_condition_types: str = field(
        default="{0}",
        metadata={
            "name": "boundaryConditionTypes",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        },
    )
    box_average_history: str = field(
        default="0",
        metadata={
            "name": "boxAverageHistory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    contact_gap_correction: str = field(
        default="0",
        metadata={
            "name": "contactGapCorrection",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    cpdi_domain_scaling: str = field(
        default="0",
        metadata={
            "name": "cpdiDomainScaling",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    damage_field_partitioning: str = field(
        default="0",
        metadata={
            "name": "damageFieldPartitioning",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    discretization: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
    } )
    f_table_interp_type: str = field(
        default="0",
        metadata={
            "name": "fTableInterpType",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    f_table_path: Optional[ str ] = field(
        default=None,
        metadata={
            "name": "fTablePath",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
        },
    )
    friction_coefficient: str = field(
        default="0",
        metadata={
            "name": "frictionCoefficient",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    needs_neighbor_list: str = field(
        default="0",
        metadata={
            "name": "needsNeighborList",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    neighbor_radius: str = field(
        default="-1",
        metadata={
            "name": "neighborRadius",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    plane_strain: str = field(
        default="0",
        metadata={
            "name": "planeStrain",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    prescribed_bc_table: str = field(
        default="0",
        metadata={
            "name": "prescribedBcTable",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    prescribed_boundary_ftable: str = field(
        default="0",
        metadata={
            "name": "prescribedBoundaryFTable",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    reaction_history: str = field(
        default="0",
        metadata={
            "name": "reactionHistory",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    separability_min_damage: str = field(
        default="0.5",
        metadata={
            "name": "separabilityMinDamage",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    solver_profiling: str = field(
        default="0",
        metadata={
            "name": "solverProfiling",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    surface_detection: str = field(
        default="0",
        metadata={
            "name": "surfaceDetection",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    time_integration_option: str = field(
        default="ExplicitDynamic",
        metadata={
            "name": "timeIntegrationOption",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
        },
    )
    treat_fully_damaged_as_single_field: str = field(
        default="1",
        metadata={
            "name": "treatFullyDamagedAsSingleField",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    use_damage_as_surface_flag: str = field(
        default="0",
        metadata={
            "name": "useDamageAsSurfaceFlag",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class SurfaceGenerator:

    class Meta:
        name = "SurfaceGeneratorType"

    linear_solver_parameters: List[ LinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "LinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    nonlinear_solver_parameters: List[ NonlinearSolverParameters ] = field(
        default_factory=list,
        metadata={
            "name": "NonlinearSolverParameters",
            "type": "Element",
            "namespace": "",
        },
    )
    cfl_factor: str = field(
        default="0.5",
        metadata={
            "name": "cflFactor",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    fracture_region: str = field(
        default="Fracture",
        metadata={
            "name": "fractureRegion",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    initial_dt: str = field(
        default="1e+99",
        metadata={
            "name": "initialDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    is_poroelastic: str = field(
        default="0",
        metadata={
            "name": "isPoroelastic",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    mpi_comm_order: str = field(
        default="0",
        metadata={
            "name": "mpiCommOrder",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    node_based_sif: str = field(
        default="0",
        metadata={
            "name": "nodeBasedSIF",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    rock_toughness: str = field(
        metadata={
            "name": "rockToughness",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    target_regions: str = field(
        metadata={
            "name": "targetRegions",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Tasks:

    class Meta:
        name = "TasksType"

    compositional_multiphase_reservoir_poromechanics_initialization: List[
        CompositionalMultiphaseReservoirPoromechanicsInitialization ] = field(
            default_factory=list,
            metadata={
                "name": "CompositionalMultiphaseReservoirPoromechanicsInitialization",
                "type": "Element",
                "namespace": "",
            },
        )
    compositional_multiphase_statistics: List[ CompositionalMultiphaseStatistics ] = ( field(
        default_factory=list,
        metadata={
            "name": "CompositionalMultiphaseStatistics",
            "type": "Element",
            "namespace": "",
        },
    ) )
    multiphase_poromechanics_initialization: List[ MultiphasePoromechanicsInitialization ] = field(
        default_factory=list,
        metadata={
            "name": "MultiphasePoromechanicsInitialization",
            "type": "Element",
            "namespace": "",
        },
    )
    pvtdriver: List[ Pvtdriver ] = field(
        default_factory=list,
        metadata={
            "name": "PVTDriver",
            "type": "Element",
            "namespace": "",
        },
    )
    pack_collection: List[ PackCollection ] = field(
        default_factory=list,
        metadata={
            "name": "PackCollection",
            "type": "Element",
            "namespace": "",
        },
    )
    reactive_fluid_driver: List[ ReactiveFluidDriver ] = field(
        default_factory=list,
        metadata={
            "name": "ReactiveFluidDriver",
            "type": "Element",
            "namespace": "",
        },
    )
    relperm_driver: List[ RelpermDriver ] = field(
        default_factory=list,
        metadata={
            "name": "RelpermDriver",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_poromechanics_initialization: List[ SinglePhasePoromechanicsInitialization ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhasePoromechanicsInitialization",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_reservoir_poromechanics_initialization: List[
        SinglePhaseReservoirPoromechanicsInitialization ] = field(
            default_factory=list,
            metadata={
                "name": "SinglePhaseReservoirPoromechanicsInitialization",
                "type": "Element",
                "namespace": "",
            },
        )
    single_phase_statistics: List[ SinglePhaseStatistics ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhaseStatistics",
            "type": "Element",
            "namespace": "",
        },
    )
    solid_mechanics_state_reset: List[ SolidMechanicsStateReset ] = field(
        default_factory=list,
        metadata={
            "name": "SolidMechanicsStateReset",
            "type": "Element",
            "namespace": "",
        },
    )
    solid_mechanics_statistics: List[ SolidMechanicsStatistics ] = field(
        default_factory=list,
        metadata={
            "name": "SolidMechanicsStatistics",
            "type": "Element",
            "namespace": "",
        },
    )
    triaxial_driver: List[ TriaxialDriver ] = field(
        default_factory=list,
        metadata={
            "name": "TriaxialDriver",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class Vtkwell:

    class Meta:
        name = "VTKWellType"

    perforation: List[ Perforation ] = field(
        default_factory=list,
        metadata={
            "name": "Perforation",
            "type": "Element",
            "namespace": "",
        },
    )
    file: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
    } )
    min_element_length: str = field(
        default="0.001",
        metadata={
            "name": "minElementLength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    min_segment_length: str = field(
        default="0.01",
        metadata={
            "name": "minSegmentLength",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    num_elements_per_segment: str = field( metadata={
        "name": "numElementsPerSegment",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
    } )
    radius: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        } )
    well_controls_name: str = field( metadata={
        "name": "wellControlsName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    well_region_name: str = field( metadata={
        "name": "wellRegionName",
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^,\{\}\s]*\s*",
    } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Crusher:

    class Meta:
        name = "crusherType"

    run: List[ Run ] = field(
        default_factory=list,
        metadata={
            "name": "Run",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class Lassen:

    class Meta:
        name = "lassenType"

    run: List[ Run ] = field(
        default_factory=list,
        metadata={
            "name": "Run",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class Quartz:

    class Meta:
        name = "quartzType"

    run: List[ Run ] = field(
        default_factory=list,
        metadata={
            "name": "Run",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class Benchmarks:

    class Meta:
        name = "BenchmarksType"

    crusher: List[ Crusher ] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lassen: List[ Lassen ] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    quartz: List[ Quartz ] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class InternalMesh:

    class Meta:
        name = "InternalMeshType"

    internal_well: List[ InternalWell ] = field(
        default_factory=list,
        metadata={
            "name": "InternalWell",
            "type": "Element",
            "namespace": "",
        },
    )
    vtkwell: List[ Vtkwell ] = field(
        default_factory=list,
        metadata={
            "name": "VTKWell",
            "type": "Element",
            "namespace": "",
        },
    )
    cell_block_names: str = field(
        metadata={
            "name": "cellBlockNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    element_types: str = field(
        metadata={
            "name": "elementTypes",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    nx: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        } )
    ny: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        } )
    nz: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        } )
    position_tolerance: str = field(
        default="1e-10",
        metadata={
            "name": "positionTolerance",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    triangle_pattern: str = field(
        default="0",
        metadata={
            "name": "trianglePattern",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    x_bias: str = field(
        default="{1}",
        metadata={
            "name":
            "xBias",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    x_coords: str = field(
        metadata={
            "name":
            "xCoords",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    y_bias: str = field(
        default="{1}",
        metadata={
            "name":
            "yBias",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    y_coords: str = field(
        metadata={
            "name":
            "yCoords",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    z_bias: str = field(
        default="{1}",
        metadata={
            "name":
            "zBias",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    z_coords: str = field(
        metadata={
            "name":
            "zCoords",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class InternalWellbore:

    class Meta:
        name = "InternalWellboreType"

    internal_well: List[ InternalWell ] = field(
        default_factory=list,
        metadata={
            "name": "InternalWell",
            "type": "Element",
            "namespace": "",
        },
    )
    vtkwell: List[ Vtkwell ] = field(
        default_factory=list,
        metadata={
            "name": "VTKWell",
            "type": "Element",
            "namespace": "",
        },
    )
    auto_space_radial_elems: str = field(
        default="{-1}",
        metadata={
            "name":
            "autoSpaceRadialElems",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    cartesian_mapping_inner_radius: str = field(
        default="1e+99",
        metadata={
            "name": "cartesianMappingInnerRadius",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    cell_block_names: str = field(
        metadata={
            "name": "cellBlockNames",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        } )
    element_types: str = field(
        metadata={
            "name": "elementTypes",
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([^,\{\}\s]+\s*,\s*)*[^,\{\}\s]+\s*)?\}\s*",
        } )
    hard_radial_coords: str = field(
        default="{0}",
        metadata={
            "name":
            "hardRadialCoords",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    nr: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        } )
    nt: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        } )
    nz: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]+\s*,\s*)*[+-]?[\d]+\s*)?\}\s*",
        } )
    position_tolerance: str = field(
        default="1e-10",
        metadata={
            "name": "positionTolerance",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    r_bias: str = field(
        default="{-0.8}",
        metadata={
            "name":
            "rBias",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    radius: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    theta: str = field(
        metadata={
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    trajectory: str = field(
        default="{{0}}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*,\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*\}\s*",
        },
    )
    triangle_pattern: str = field(
        default="0",
        metadata={
            "name": "trianglePattern",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    use_cartesian_outer_boundary: str = field(
        default="1000000",
        metadata={
            "name": "useCartesianOuterBoundary",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    x_bias: str = field(
        default="{1}",
        metadata={
            "name":
            "xBias",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    y_bias: str = field(
        default="{1}",
        metadata={
            "name":
            "yBias",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    z_bias: str = field(
        default="{1}",
        metadata={
            "name":
            "zBias",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        },
    )
    z_coords: str = field(
        metadata={
            "name":
            "zCoords",
            "type":
            "Attribute",
            "required":
            True,
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*)?\}\s*",
        } )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class NumericalMethods:

    class Meta:
        name = "NumericalMethodsType"

    finite_elements: List[ FiniteElements ] = field(
        default_factory=list,
        metadata={
            "name": "FiniteElements",
            "type": "Element",
            "namespace": "",
        },
    )
    finite_volume: List[ FiniteVolume ] = field(
        default_factory=list,
        metadata={
            "name": "FiniteVolume",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class SoloEvent:

    class Meta:
        name = "SoloEventType"

    halt_event: List[ HaltEvent ] = field(
        default_factory=list,
        metadata={
            "name": "HaltEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    periodic_event: List[ PeriodicEvent ] = field(
        default_factory=list,
        metadata={
            "name": "PeriodicEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    solo_event: List[ SoloEvent ] = field(
        default_factory=list,
        metadata={
            "name": "SoloEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    begin_time: str = field(
        default="0",
        metadata={
            "name": "beginTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    end_time: str = field(
        default="1e+100",
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    final_dt_stretch: str = field(
        default="0.001",
        metadata={
            "name": "finalDtStretch",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    force_dt: str = field(
        default="-1",
        metadata={
            "name": "forceDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_event_dt: str = field(
        default="-1",
        metadata={
            "name": "maxEventDt",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    target: Optional[ str ] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    target_cycle: str = field(
        default="-1",
        metadata={
            "name": "targetCycle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_exact_start_stop: str = field(
        default="1",
        metadata={
            "name": "targetExactStartStop",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_exact_timestep: str = field(
        default="1",
        metadata={
            "name": "targetExactTimestep",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    target_time: str = field(
        default="-1",
        metadata={
            "name": "targetTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Solvers:

    class Meta:
        name = "SolversType"

    acoustic_elastic_sem: List[ AcousticElasticSem ] = field(
        default_factory=list,
        metadata={
            "name": "AcousticElasticSEM",
            "type": "Element",
            "namespace": "",
        },
    )
    acoustic_first_order_sem: List[ AcousticFirstOrderSem ] = field(
        default_factory=list,
        metadata={
            "name": "AcousticFirstOrderSEM",
            "type": "Element",
            "namespace": "",
        },
    )
    acoustic_sem: List[ AcousticSem ] = field(
        default_factory=list,
        metadata={
            "name": "AcousticSEM",
            "type": "Element",
            "namespace": "",
        },
    )
    acoustic_vtisem: List[ AcousticVtisem ] = field(
        default_factory=list,
        metadata={
            "name": "AcousticVTISEM",
            "type": "Element",
            "namespace": "",
        },
    )
    compositional_multiphase_fvm: List[ CompositionalMultiphaseFvm ] = field(
        default_factory=list,
        metadata={
            "name": "CompositionalMultiphaseFVM",
            "type": "Element",
            "namespace": "",
        },
    )
    compositional_multiphase_hybrid_fvm: List[ CompositionalMultiphaseHybridFvm ] = field(
        default_factory=list,
        metadata={
            "name": "CompositionalMultiphaseHybridFVM",
            "type": "Element",
            "namespace": "",
        },
    )
    compositional_multiphase_reservoir: List[ CompositionalMultiphaseReservoir ] = field(
        default_factory=list,
        metadata={
            "name": "CompositionalMultiphaseReservoir",
            "type": "Element",
            "namespace": "",
        },
    )
    compositional_multiphase_reservoir_poromechanics: List[ CompositionalMultiphaseReservoirPoromechanics ] = field(
        default_factory=list,
        metadata={
            "name": "CompositionalMultiphaseReservoirPoromechanics",
            "type": "Element",
            "namespace": "",
        },
    )
    compositional_multiphase_well: List[ CompositionalMultiphaseWell ] = field(
        default_factory=list,
        metadata={
            "name": "CompositionalMultiphaseWell",
            "type": "Element",
            "namespace": "",
        },
    )
    elastic_first_order_sem: List[ ElasticFirstOrderSem ] = field(
        default_factory=list,
        metadata={
            "name": "ElasticFirstOrderSEM",
            "type": "Element",
            "namespace": "",
        },
    )
    elastic_sem: List[ ElasticSem ] = field(
        default_factory=list,
        metadata={
            "name": "ElasticSEM",
            "type": "Element",
            "namespace": "",
        },
    )
    embedded_surface_generator: List[ EmbeddedSurfaceGenerator ] = field(
        default_factory=list,
        metadata={
            "name": "EmbeddedSurfaceGenerator",
            "type": "Element",
            "namespace": "",
        },
    )
    flow_proppant_transport: List[ FlowProppantTransport ] = field(
        default_factory=list,
        metadata={
            "name": "FlowProppantTransport",
            "type": "Element",
            "namespace": "",
        },
    )
    hydrofracture: List[ Hydrofracture ] = field(
        default_factory=list,
        metadata={
            "name": "Hydrofracture",
            "type": "Element",
            "namespace": "",
        },
    )
    laplace_fem: List[ LaplaceFem ] = field(
        default_factory=list,
        metadata={
            "name": "LaplaceFEM",
            "type": "Element",
            "namespace": "",
        },
    )
    multiphase_poromechanics: List[ MultiphasePoromechanics ] = field(
        default_factory=list,
        metadata={
            "name": "MultiphasePoromechanics",
            "type": "Element",
            "namespace": "",
        },
    )
    multiphase_poromechanics_reservoir: List[ MultiphasePoromechanicsReservoir ] = field(
        default_factory=list,
        metadata={
            "name": "MultiphasePoromechanicsReservoir",
            "type": "Element",
            "namespace": "",
        },
    )
    phase_field_damage_fem: List[ PhaseFieldDamageFem ] = field(
        default_factory=list,
        metadata={
            "name": "PhaseFieldDamageFEM",
            "type": "Element",
            "namespace": "",
        },
    )
    phase_field_fracture: List[ PhaseFieldFracture ] = field(
        default_factory=list,
        metadata={
            "name": "PhaseFieldFracture",
            "type": "Element",
            "namespace": "",
        },
    )
    proppant_transport: List[ ProppantTransport ] = field(
        default_factory=list,
        metadata={
            "name": "ProppantTransport",
            "type": "Element",
            "namespace": "",
        },
    )
    reactive_compositional_multiphase_obl: List[ ReactiveCompositionalMultiphaseObl ] = ( field(
        default_factory=list,
        metadata={
            "name": "ReactiveCompositionalMultiphaseOBL",
            "type": "Element",
            "namespace": "",
        },
    ) )
    single_phase_fvm: List[ SinglePhaseFvm ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhaseFVM",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_hybrid_fvm: List[ SinglePhaseHybridFvm ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhaseHybridFVM",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_poromechanics: List[ SinglePhasePoromechanics ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhasePoromechanics",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_poromechanics_conforming_fractures: List[ SinglePhasePoromechanicsConformingFractures ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhasePoromechanicsConformingFractures",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_poromechanics_embedded_fractures: List[ SinglePhasePoromechanicsEmbeddedFractures ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhasePoromechanicsEmbeddedFractures",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_poromechanics_reservoir: List[ SinglePhasePoromechanicsReservoir ] = ( field(
        default_factory=list,
        metadata={
            "name": "SinglePhasePoromechanicsReservoir",
            "type": "Element",
            "namespace": "",
        },
    ) )
    single_phase_proppant_fvm: List[ SinglePhaseProppantFvm ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhaseProppantFVM",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_reservoir: List[ SinglePhaseReservoir ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhaseReservoir",
            "type": "Element",
            "namespace": "",
        },
    )
    single_phase_reservoir_poromechanics: List[ SinglePhaseReservoirPoromechanics ] = ( field(
        default_factory=list,
        metadata={
            "name": "SinglePhaseReservoirPoromechanics",
            "type": "Element",
            "namespace": "",
        },
    ) )
    single_phase_well: List[ SinglePhaseWell ] = field(
        default_factory=list,
        metadata={
            "name": "SinglePhaseWell",
            "type": "Element",
            "namespace": "",
        },
    )
    solid_mechanics_embedded_fractures: List[ SolidMechanicsEmbeddedFractures ] = field(
        default_factory=list,
        metadata={
            "name": "SolidMechanicsEmbeddedFractures",
            "type": "Element",
            "namespace": "",
        },
    )
    solid_mechanics_lagrange_contact: List[ SolidMechanicsLagrangeContact ] = field(
        default_factory=list,
        metadata={
            "name": "SolidMechanicsLagrangeContact",
            "type": "Element",
            "namespace": "",
        },
    )
    solid_mechanics_lagrangian_ssle: List[ SolidMechanicsLagrangianSsle ] = field(
        default_factory=list,
        metadata={
            "name": "SolidMechanicsLagrangianSSLE",
            "type": "Element",
            "namespace": "",
        },
    )
    solid_mechanics_lagrangian_fem: List[ SolidMechanicsLagrangianFem ] = field(
        default_factory=list,
        metadata={
            "name": "SolidMechanics_LagrangianFEM",
            "type": "Element",
            "namespace": "",
        },
    )
    solid_mechanics_mpm: List[ SolidMechanicsMpm ] = field(
        default_factory=list,
        metadata={
            "name": "SolidMechanics_MPM",
            "type": "Element",
            "namespace": "",
        },
    )
    surface_generator: List[ SurfaceGenerator ] = field(
        default_factory=list,
        metadata={
            "name": "SurfaceGenerator",
            "type": "Element",
            "namespace": "",
        },
    )
    gravity_vector: str = field(
        default="{0,0,-9.81}",
        metadata={
            "name":
            "gravityVector",
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )


@dataclass( kw_only=True )
class Vtkmesh:

    class Meta:
        name = "VTKMeshType"

    internal_well: List[ InternalWell ] = field(
        default_factory=list,
        metadata={
            "name": "InternalWell",
            "type": "Element",
            "namespace": "",
        },
    )
    vtkwell: List[ Vtkwell ] = field(
        default_factory=list,
        metadata={
            "name": "VTKWell",
            "type": "Element",
            "namespace": "",
        },
    )
    face_blocks: str = field(
        default="{}",
        metadata={
            "name": "faceBlocks",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    field_names_in_geosx: str = field(
        default="{}",
        metadata={
            "name": "fieldNamesInGEOSX",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    fields_to_import: str = field(
        default="{}",
        metadata={
            "name": "fieldsToImport",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    file: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[^*?<>\|:\";,\s]*\s*",
    } )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    main_block_name: str = field(
        default="main",
        metadata={
            "name": "mainBlockName",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    nodeset_names: str = field(
        default="{}",
        metadata={
            "name": "nodesetNames",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    partition_method: str = field(
        default="parmetis",
        metadata={
            "name": "partitionMethod",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|parmetis|ptscotch",
        },
    )
    partition_refinement: str = field(
        default="1",
        metadata={
            "name": "partitionRefinement",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    region_attribute: str = field(
        default="attribute",
        metadata={
            "name": "regionAttribute",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_/]*",
        },
    )
    scale: str = field(
        default="{1,1,1}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    surfacic_fields_in_geosx: str = field(
        default="{}",
        metadata={
            "name": "surfacicFieldsInGEOSX",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    surfacic_fields_to_import: str = field(
        default="{}",
        metadata={
            "name": "surfacicFieldsToImport",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|\s*\{\s*(([a-zA-Z0-9.\-_/]*\s*,\s*)*[a-zA-Z0-9.\-_/]*\s*)?\}\s*",
        },
    )
    translate: str = field(
        default="{0,0,0}",
        metadata={
            "type":
            "Attribute",
            "pattern":
            r".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*,\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}\s*",
        },
    )
    use_global_ids: str = field(
        default="0",
        metadata={
            "name": "useGlobalIds",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    name: str = field( metadata={
        "type": "Attribute",
        "required": True,
        "pattern": r".*[\[\]`$].*|[a-zA-Z0-9.\-_]+",
    } )


@dataclass( kw_only=True )
class Events:

    class Meta:
        name = "EventsType"

    halt_event: List[ HaltEvent ] = field(
        default_factory=list,
        metadata={
            "name": "HaltEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    periodic_event: List[ PeriodicEvent ] = field(
        default_factory=list,
        metadata={
            "name": "PeriodicEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    solo_event: List[ SoloEvent ] = field(
        default_factory=list,
        metadata={
            "name": "SoloEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    log_level: str = field(
        default="0",
        metadata={
            "name": "logLevel",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_cycle: str = field(
        default="2147483647",
        metadata={
            "name": "maxCycle",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]+",
        },
    )
    max_time: str = field(
        default="1.79769e+308",
        metadata={
            "name": "maxTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    min_time: str = field(
        default="0",
        metadata={
            "name": "minTime",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)",
        },
    )
    time_output_format: str = field(
        default="seconds",
        metadata={
            "name": "timeOutputFormat",
            "type": "Attribute",
            "pattern": r".*[\[\]`$].*|seconds|minutes|hours|days|years|full",
        },
    )


@dataclass( kw_only=True )
class Mesh:

    class Meta:
        name = "MeshType"

    internal_mesh: List[ InternalMesh ] = field(
        default_factory=list,
        metadata={
            "name": "InternalMesh",
            "type": "Element",
            "namespace": "",
        },
    )
    internal_wellbore: List[ InternalWellbore ] = field(
        default_factory=list,
        metadata={
            "name": "InternalWellbore",
            "type": "Element",
            "namespace": "",
        },
    )
    particle_mesh: List[ ParticleMesh ] = field(
        default_factory=list,
        metadata={
            "name": "ParticleMesh",
            "type": "Element",
            "namespace": "",
        },
    )
    vtkmesh: List[ Vtkmesh ] = field(
        default_factory=list,
        metadata={
            "name": "VTKMesh",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass( kw_only=True )
class Problem:

    class Meta:
        name = "ProblemType"

    events: List[ Events ] = field(
        default_factory=list,
        metadata={
            "name": "Events",
            "type": "Element",
            "namespace": "",
        },
    )
    field_specifications: List[ FieldSpecifications ] = field(
        default_factory=list,
        metadata={
            "name": "FieldSpecifications",
            "type": "Element",
            "namespace": "",
        },
    )
    functions: List[ Functions ] = field(
        default_factory=list,
        metadata={
            "name": "Functions",
            "type": "Element",
            "namespace": "",
        },
    )
    geometry: List[ Geometry ] = field(
        default_factory=list,
        metadata={
            "name": "Geometry",
            "type": "Element",
            "namespace": "",
        },
    )
    mesh: List[ Mesh ] = field(
        default_factory=list,
        metadata={
            "name": "Mesh",
            "type": "Element",
            "namespace": "",
        },
    )
    numerical_methods: List[ NumericalMethods ] = field(
        default_factory=list,
        metadata={
            "name": "NumericalMethods",
            "type": "Element",
            "namespace": "",
        },
    )
    outputs: List[ Outputs ] = field(
        default_factory=list,
        metadata={
            "name": "Outputs",
            "type": "Element",
            "namespace": "",
        },
    )
    solvers: List[ Solvers ] = field(
        default_factory=list,
        metadata={
            "name": "Solvers",
            "type": "Element",
            "namespace": "",
        },
    )
    tasks: List[ Tasks ] = field(
        default_factory=list,
        metadata={
            "name": "Tasks",
            "type": "Element",
            "namespace": "",
        },
    )
    constitutive: List[ Constitutive ] = field(
        default_factory=list,
        metadata={
            "name": "Constitutive",
            "type": "Element",
            "namespace": "",
        },
    )
    element_regions: List[ ElementRegions ] = field(
        default_factory=list,
        metadata={
            "name": "ElementRegions",
            "type": "Element",
            "namespace": "",
        },
    )
    particle_regions: List[ ParticleRegions ] = field(
        default_factory=list,
        metadata={
            "name": "ParticleRegions",
            "type": "Element",
            "namespace": "",
        },
    )
    included: List[ Included ] = field(
        default_factory=list,
        metadata={
            "name": "Included",
            "type": "Element",
            "namespace": "",
        },
    )
    parameters: List[ Parameters ] = field(
        default_factory=list,
        metadata={
            "name": "Parameters",
            "type": "Element",
            "namespace": "",
        },
    )
    benchmarks: List[ Benchmarks ] = field(
        default_factory=list,
        metadata={
            "name": "Benchmarks",
            "type": "Element",
            "namespace": "",
        },
    )
